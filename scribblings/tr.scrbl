#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.9.0.4 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 25 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 18 #"java-comment-box%\0"
1 0 23 #"java-interactions-box%\0"
1 0 1 6 #"wxloc\0"
          0 0 70 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
41 #"profj:syntax-colors:scheme:block-comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 139 0 0 0 -1 -1 2 37
#"profj:syntax-colors:scheme:prim-type\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 139 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"profj:syntax-colors:scheme:identifier\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 34
#"profj:syntax-colors:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:literal\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 33
#"profj:syntax-colors:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:default\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 37
#"profj:syntax-colors:scheme:uncovered\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:covered\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 139 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 6971 0 28 3 21 #"#lang scribble/manual"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"require"
0 0 24 3 1 #"["
0 0 19 3 10 #"\"util.rkt\""
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"for-label"
0 0 24 3 2 #" ("
0 0 14 3 12 #"only-meta-in"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 12 #"typed/racket"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 16 #"scribble/example"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 13 #"racket/string"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"@("
0 0 14 3 11 #"use-mathjax"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"@("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"tr-eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"make-eval-factory"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 12 #"typed/racket"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 5 #"title"
0 0 24 3 1 #"["
0 0 23 3 7 #"#:style"
0 0 24 3 2 #" ("
0 0 14 3 10 #"with-html5"
0 0 24 3 1 #" "
0 0 14 3 16 #"manual-doc-style"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 23 3 9 #"#:version"
0 0 24 3 2 #" ("
0 0 14 3 12 #"version-text"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 23 3 5 #"#:tag"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"tr-chap\""
0 0 24 3 4 #"]{@|"
0 0 14 3 11 #"Typedracket"
0 0 24 3 2 #"|}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 2 #"We"
0 0 20 3 1 #" "
0 0 20 3 5 #"start"
0 0 20 3 1 #" "
0 0 20 3 4 #"this"
0 0 20 3 1 #" "
0 0 20 3 7 #"section"
0 0 20 3 1 #" "
0 0 20 3 4 #"with"
0 0 20 3 1 #" "
0 0 20 3 4 #"some"
0 0 20 3 1 #" "
0 0 20 3 8 #"history:"
0 0 20 3 1 #" "
0 0 20 3 4 #"Lisp"
0 0 20 3 2 #", "
0 0 24 3 1 #"@"
0 0 14 3 4 #"emph"
0 0 24 3 1 #"{"
0 0 20 3 3 #"the"
0 0 24 3 1 #"}"
0 0 20 3 1 #" "
0 0 20 3 8 #"language"
0 0 20 3 1 #" "
0 0 20 3 4 #"with"
0 0 20 3 5 #" lots"
0 0 24 29 1 #"\n"
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 11 #"parentheses"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 7 #"shortly"
0 0 20 3 1 #" "
0 0 20 3 10 #"following "
0 0 29 3 7 #"Fortran"
0 0 20 3 1 #" "
0 0 20 3 2 #"as"
0 0 20 3 1 #" "
0 0 20 3 3 #"one"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 5 #"first"
0 0 20 3 11 #" high-level"
0 0 24 29 1 #"\n"
0 0 20 3 11 #"programming"
0 0 20 3 1 #" "
0 0 20 3 9 #"languages"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"was"
0 0 20 3 1 #" "
0 0 20 3 9 #"initially"
0 0 20 3 1 #" "
0 0 20 3 8 #"designed"
0 0 20 3 1 #" "
0 0 20 3 7 #"between"
0 0 20 3 1 #" "
0 0 20 3 4 #"1956"
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 4 #"1958"
0 0 20 3 1 #","
0 0 20 3 4 #" and"
0 0 24 29 1 #"\n"
0 0 20 3 12 #"subsequently"
0 0 20 3 12 #" implemented"
0 0 24 3 1 #"@"
0 0 14 3 5 #"~cite"
0 0 24 3 1 #"["
0 0 19 3 21 #"\"McCarthyHistoryLisp\""
0 0 24 3 1 #"]"
0 0 20 3 1 #"."
0 0 20 3 1 #" "
0 0 20 3 8 #"Dialects"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 5 #" Lisp"
0 0 24 29 1 #"\n"
0 0 20 3 9 #"generally"
0 0 20 3 1 #" "
0 0 20 3 7 #"support"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 7 #"variety"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 11 #"programming"
0 0 20 3 1 #" "
0 0 20 3 9 #"paradigms"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 9 #"including"
0 0 20 3 2 #" ("
0 0 20 3 3 #"but"
0 0 20 3 4 #" not"
0 0 24 29 1 #"\n"
0 0 20 3 7 #"limited"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 2 #") "
0 0 20 3 10 #"functional"
0 0 20 3 1 #" "
0 0 20 3 11 #"programming"
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 15 #"object-oriented"
0 0 20 3 1 #" "
0 0 20 3 11 #"programming"
0 0 20 3 2 #" ("
0 0 20 3 4 #"e.g."
0 0 20 3 4 #" via"
0 0 24 29 1 #"\n"
0 0 29 3 4 #"CLOS"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 6 #"Common"
0 0 20 3 1 #" "
0 0 20 3 4 #"Lisp"
0 0 20 3 1 #" "
0 0 20 3 6 #"Object"
0 0 20 3 1 #" "
0 0 20 3 6 #"System"
0 0 20 3 1 #")"
0 0 20 3 1 #"."
0 0 20 3 1 #" "
0 0 20 3 3 #"One"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 5 #"most "
0 0 29 3 10 #"proeminent"
0 0 20 3 8 #" aspects"
0 0 24 29 1 #"\n"
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 4 #"Lisp"
0 0 20 3 1 #" "
0 0 20 3 3 #"is "
0 0 29 3 13 #"homoiconicity"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 4 #"fact"
0 0 20 3 1 #" "
0 0 20 3 4 #"that"
0 0 20 3 1 #" "
0 0 20 3 8 #"programs"
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 4 #"data"
0 0 20 3 1 #" "
0 0 20 3 10 #"structures"
0 0 20 3 1 #" "
0 0 20 3 4 #"look"
0 0 20 3 4 #" the"
0 0 24 29 1 #"\n"
0 0 20 3 5 #"same."
0 0 20 3 1 #" "
0 0 20 3 4 #"This"
0 0 20 3 1 #" "
0 0 20 3 7 #"enables"
0 0 20 3 1 #" "
0 0 20 3 8 #"programs"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 6 #"easily"
0 0 20 3 1 #" "
0 0 20 3 10 #"manipulate"
0 0 20 3 1 #" "
0 0 20 3 5 #"other"
0 0 20 3 1 #" "
0 0 20 3 8 #"programs"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 3 #"led"
0 0 20 3 3 #" to"
0 0 24 29 1 #"\n"
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 9 #"extensive"
0 0 20 3 1 #" "
0 0 20 3 3 #"use"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 7 #"macros."
0 0 20 3 1 #" "
0 0 20 3 4 #"Uses"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 6 #"macros"
0 0 20 3 1 #" "
0 0 20 3 7 #"usually"
0 0 20 3 1 #" "
0 0 20 3 4 #"look"
0 0 20 3 1 #" "
0 0 20 3 4 #"like"
0 0 20 3 9 #" function"
0 0 24 29 1 #"\n"
0 0 20 3 12 #"applications"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"but"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 7 #"instead"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 8 #"invoking"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 6 #"target"
0 0 20 3 1 #" "
0 0 20 3 8 #"function"
0 0 20 3 1 #" "
0 0 20 3 2 #"at"
0 0 20 3 1 #" "
0 0 20 3 8 #"run-time"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 6 #" macro"
0 0 24 29 1 #"\n"
0 0 20 3 4 #"will"
0 0 20 3 1 #" "
0 0 20 3 7 #"perform"
0 0 20 3 1 #" "
0 0 20 3 4 #"some"
0 0 20 3 1 #" "
0 0 20 3 11 #"computation"
0 0 20 3 1 #" "
0 0 20 3 2 #"at"
0 0 20 3 1 #" "
0 0 20 3 12 #"compile-time"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 6 #"expand"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 4 #"some"
0 0 20 3 1 #" "
0 0 20 3 3 #"new"
0 0 20 3 1 #" "
0 0 20 3 5 #"code,"
0 0 24 29 1 #"\n"
0 0 20 3 5 #"which"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 8 #"injected"
0 0 20 3 1 #" "
0 0 20 3 2 #"as"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 11 #"replacement"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 5 #"macro"
0 0 20 3 1 #"'"
0 0 20 3 1 #"s"
0 0 20 3 5 #" use."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 3 #"The"
0 0 20 3 1 #" "
0 0 20 3 3 #"two"
0 0 20 3 1 #" "
0 0 20 3 4 #"main"
0 0 20 3 1 #" "
0 0 20 3 8 #"dialects"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 4 #"Lisp"
0 0 20 3 1 #" "
0 0 20 3 3 #"are"
0 0 20 3 1 #" "
0 0 20 3 6 #"Common"
0 0 20 3 1 #" "
0 0 20 3 4 #"Lisp"
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 7 #"Scheme."
0 0 20 3 1 #" "
0 0 20 3 6 #"Scheme"
0 0 20 3 1 #" "
0 0 20 3 7 #"follows"
0 0 20 3 2 #" a"
0 0 24 29 1 #"\n"
0 0 20 3 10 #"minimalist"
0 0 20 3 1 #" "
0 0 20 3 10 #"philosophy"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 5 #"where"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 5 #"small"
0 0 20 3 1 #" "
0 0 20 3 4 #"core"
0 0 20 3 3 #" is"
0 0 24 29 1 #"\n"
0 0 20 3 12 #"standardised"
0 0 24 3 1 #"@"
0 0 14 3 5 #"~cite"
0 0 24 3 1 #"["
0 0 19 3 5 #"\"r5rs"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"r6rs"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"r7rs"
0 0 19 3 1 #"\""
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 12 #"subsequently"
0 0 20 3 1 #" "
0 0 20 3 8 #"extended"
0 0 20 3 1 #" "
0 0 20 3 3 #"via"
0 0 20 3 7 #" macros"
0 0 24 29 1 #"\n"
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 10 #"additional"
0 0 20 3 1 #" "
0 0 20 3 8 #"function"
0 0 20 3 13 #" definitions."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 6 #"Racket"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 8 #"formerly"
0 0 20 3 1 #" "
0 0 20 3 6 #"named "
0 0 29 3 3 #"PLT"
0 0 20 3 1 #" "
0 0 20 3 6 #"Scheme"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 7 #"started"
0 0 20 3 1 #" "
0 0 20 3 2 #"as"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 6 #"Scheme"
0 0 20 3 1 #" "
0 0 20 3 15 #"implementation."
0 0 20 3 7 #" Racket"
0 0 24 29 1 #"\n"
0 0 20 3 7 #"evolved"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 6 #"Racket"
0 0 20 3 10 #" Manifesto"
0 0 24 3 1 #"@"
0 0 14 3 5 #"~cite"
0 0 24 3 1 #"["
0 0 19 3 16 #"\"racketmanifesto"
0 0 19 3 1 #"\""
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 8 #"presents"
0 0 20 3 1 #" "
0 0 20 3 2 #"it"
0 0 20 3 1 #" "
0 0 20 3 2 #"as"
0 0 20 3 2 #" a"
0 0 24 29 1 #"\n"
0 0 20 3 2 #"``"
0 0 20 3 20 #"programming-language"
0 0 20 3 1 #" "
0 0 20 3 11 #"programming"
0 0 20 3 1 #" "
0 0 20 3 8 #"language"
0 0 20 3 2 #"''"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 8 #"language"
0 0 20 3 1 #" "
0 0 20 3 5 #"which"
0 0 20 3 1 #" "
0 0 20 3 5 #"helps"
0 0 20 3 1 #" "
0 0 20 3 4 #"with"
0 0 20 3 4 #" the"
0 0 24 29 1 #"\n"
0 0 20 3 8 #"creation"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 5 #"small"
0 0 20 3 1 #" "
0 0 20 3 10 #"linguistic"
0 0 20 3 1 #" "
0 0 20 3 10 #"extensions"
0 0 20 3 1 #" "
0 0 20 3 2 #"as"
0 0 20 3 1 #" "
0 0 20 3 4 #"well"
0 0 20 3 1 #" "
0 0 20 3 2 #"as"
0 0 20 3 1 #" "
0 0 20 3 8 #"entirely"
0 0 20 3 1 #" "
0 0 20 3 3 #"new"
0 0 20 3 1 #" "
0 0 20 3 10 #"languages."
0 0 20 3 4 #" The"
0 0 24 29 1 #"\n"
0 0 20 3 6 #"Racket"
0 0 20 3 1 #" "
0 0 20 3 9 #"ecosystem"
0 0 20 3 1 #" "
0 0 20 3 8 #"features"
0 0 20 3 1 #" "
0 0 20 3 4 #"many"
0 0 20 3 1 #" "
0 0 20 3 9 #"languages"
0 0 20 3 1 #" "
0 0 20 3 8 #"covering"
0 0 20 3 1 #" "
0 0 20 3 4 #"many"
0 0 20 3 11 #" paradigms:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 8 #"itemlist"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 4 #"item"
0 0 24 3 1 #"{"
0 0 20 3 4 #"The "
0 0 24 3 1 #"@"
0 0 14 3 13 #"racketmodname"
0 0 24 3 1 #"["
0 0 14 3 11 #"racket/base"
0 0 24 3 1 #"]"
0 0 20 3 40 #" language is a full-featured programming"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 56 #"language which mostly encourages functional programming."
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 4 #"item"
0 0 24 3 2 #"{@"
0 0 14 3 13 #"racketmodname"
0 0 24 3 1 #"["
0 0 14 3 12 #"racket/class"
0 0 24 3 1 #"]"
0 0 20 3 11 #" implements"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 7 #"seclink"
0 0 24 3 1 #"["
0 0 19 3 8 #"\"classes"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 23 3 5 #"#:doc"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"lib"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"scribblings/guide/guide.scrbl"
0 0 19 3 1 #"\""
0 0 24 3 3 #")]{"
0 0 20 3 2 #"an"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 22 #"object-oriented system"
0 0 24 3 1 #"}"
0 0 20 3 19 #", implemented atop "
0 0 24 3 1 #"@"
0 0 14 3 13 #"racketmodname"
0 0 24 3 1 #"["
0 0 14 3 11 #"racket/base"
0 0 24 3 1 #"]"
0 0 20 3 6 #" using"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 51 #"macros, and can be used along with the rest of the "
0 0 24 3 1 #"@"
0 0 14 3 13 #"racketmodname"
0 0 24 3 1 #"["
0 0 14 3 11 #"racket/base"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 9 #"language."
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 4 #"item"
0 0 24 3 2 #"{@"
0 0 14 3 13 #"racketmodname"
0 0 24 3 1 #"["
0 0 14 3 7 #"racklog"
0 0 24 3 1 #"]"
0 0 20 3 48 #" is a logic programming language in the style of"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 29 3 6 #"prolog"
0 0 20 3 57 #". The Racket ecosystem also includes an implementation of"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 13 #"racketmodname"
0 0 24 3 1 #"["
0 0 14 3 7 #"datalog"
0 0 24 3 1 #"]"
0 0 20 3 1 #"."
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 4 #"item"
0 0 24 3 2 #"{@"
0 0 14 3 7 #"seclink"
0 0 24 3 1 #"["
0 0 19 3 4 #"\"top"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 23 3 5 #"#:doc"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"lib"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"scribblings/scribble/scribble.scrbl"
0 0 19 3 1 #"\""
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 8 #"Scribble"
0 0 24 3 1 #"}"
0 0 20 3 34 #" can be seen as an alternative to "
0 0 24 3 2 #"@|"
0 0 14 3 5 #"LaTeX"
0 0 24 3 1 #"|"
0 0 20 3 23 #", and is used to create"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 4 #"the "
0 0 24 3 1 #"@"
0 0 14 3 7 #"seclink"
0 0 24 3 1 #"["
0 0 19 3 4 #"\"top"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 23 3 5 #"#:doc"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"lib"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"scribblings/main/start.scrbl"
0 0 19 3 1 #"\""
0 0 24 3 3 #")]{"
0 0 20 3 6 #"Racket"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 13 #"documentation"
0 0 24 3 1 #"}"
0 0 20 3 63
#". It also supports literate programming, by embedding chunks of"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 71
(
 #"code in the document which are then aggregated together. This thesis"
 #" is"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 31 #"in fact written using Scribble."
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 4 #"item"
0 0 24 3 2 #"{@"
0 0 14 3 13 #"racketmodname"
0 0 24 3 1 #"["
0 0 14 3 9 #"slideshow"
0 0 24 3 1 #"]"
0 0 20 3 6 #" is a "
0 0 24 3 1 #"@"
0 0 15 3 7 #"deftech"
0 0 24 3 1 #"{"
0 0 29 3 3 #"DSL"
0 0 24 3 1 #"}"
0 0 20 3 27 #" (domain-specific language)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 74
(
 #"for the creation of presentations, and can be thought as an alternat"
 #"ive to"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 29 3 6 #"Beamer"
0 0 20 3 5 #" and "
0 0 29 3 6 #"SliTeX"
0 0 20 3 1 #"."
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 4 #"item"
0 0 24 3 2 #"{@"
0 0 14 3 13 #"racketmodname"
0 0 24 3 1 #"["
0 0 14 3 4 #"r5rs"
0 0 24 3 1 #"]"
0 0 20 3 5 #" and "
0 0 24 3 1 #"@"
0 0 14 3 13 #"racketmodname"
0 0 24 3 1 #"["
0 0 14 3 4 #"r6rs"
0 0 24 3 1 #"]"
0 0 20 3 23 #" are implementations of"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 35 #"the corresponding scheme standards."
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 4 #"item"
0 0 24 3 2 #"{@"
0 0 14 3 7 #"seclink"
0 0 24 3 1 #"["
0 0 19 3 4 #"\"top"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 23 3 5 #"#:doc"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"lib"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"redex/redex.scrbl"
0 0 19 3 1 #"\""
0 0 24 3 3 #")]{"
0 0 29 3 5 #"Redex"
0 0 24 3 1 #"}"
0 0 20 3 5 #" is a"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 7 #"usetech"
0 0 24 3 1 #"{"
0 0 29 3 3 #"DSL"
0 0 24 3 1 #"}"
0 0 20 3 44 #" which allows the specification of reduction"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 74
(
 #"semantics for programming languages. It features tools to explore an"
 #"d test"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 22 #"the defined semantics."
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 4 #"item"
0 0 24 3 3 #"{@|"
0 0 14 3 11 #"Typedracket"
0 0 24 3 2 #"|@"
0 0 14 3 5 #"~cite"
0 0 24 3 1 #"["
0 0 19 3 28 #"\"tobin-hochstadt_design_2008"
0 0 19 3 1 #"\""
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 19 3 27 #"\"tobin-hochstadt_typed_2010"
0 0 19 3 1 #"\""
0 0 24 3 1 #"]"
0 0 20 3 22 #" is a typed variant of"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 9 #"the main "
0 0 24 3 1 #"@"
0 0 14 3 13 #"racketmodname"
0 0 24 3 1 #"["
0 0 14 3 6 #"racket"
0 0 24 3 1 #"]"
0 0 20 3 45 #" language. It is implemented as a macro which"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 76
(
 #"takes over the whole body of the program. That macro fully expands a"
 #"ll other"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 32 #"macros in the program, and then "
0 0 29 3 10 #"typechecks"
0 0 20 3 22 #" the expanded program."
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 4 #"item"
0 0 24 3 2 #"{@"
0 0 14 3 7 #"seclink"
0 0 24 3 1 #"["
0 0 19 3 4 #"\"top"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 23 3 5 #"#:doc"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"lib"
0 0 24 3 1 #" "
0 0 19 3 38 #"\"turnstile/scribblings/turnstile.scrbl"
0 0 19 3 1 #"\""
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   @|"
0 0 14 3 9 #"Turnstile"
0 0 24 3 2 #"|}"
0 0 20 3 55 #" allows the creation of new typed languages. It takes a"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 36 #"different approach when compared to "
0 0 24 3 2 #"@|"
0 0 14 3 11 #"typedracket"
0 0 24 3 1 #"|"
0 0 20 3 22 #", and threads the type"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 73
(
 #"information through assignments and special forms, in order to be ab"
 #"le to"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 29 3 9 #"typecheck"
0 0 20 3 62
#" the program during expansion, instead of doing so afterwards."
0 0 24 3 2 #"}]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 2 #"In"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 9 #"remainder"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 4 #"this"
0 0 20 3 1 #" "
0 0 20 3 7 #"section"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 2 #"we"
0 0 20 3 1 #" "
0 0 20 3 4 #"will"
0 0 20 3 1 #" "
0 0 20 3 7 #"present"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 8 #"features"
0 0 20 3 3 #" of"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"@|"
0 0 14 3 11 #"typedracket"
0 0 24 3 1 #"|"
0 0 20 3 1 #"'"
0 0 20 3 1 #"s"
0 0 20 3 1 #" "
0 0 20 3 4 #"type"
0 0 20 3 1 #" "
0 0 20 3 6 #"system"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 4 #"then"
0 0 20 3 1 #" "
0 0 20 3 7 #"present"
0 0 20 3 1 #" "
0 0 20 3 6 #"formal"
0 0 20 3 1 #" "
0 0 20 3 9 #"semantics"
0 0 20 3 1 #" "
0 0 20 3 3 #"for"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 7 #" subset"
0 0 24 29 1 #"\n"
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 5 #"those"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 6 #"namely"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 4 #"part"
0 0 20 3 1 #" "
0 0 20 3 5 #"which"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 8 #"relevant"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 3 #"our"
0 0 20 3 6 #" work."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"other-doc"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"lib"
0 0 24 3 1 #" "
0 0 19 3 40 #"\"typed-racket/scribblings/ts-guide.scrbl"
0 0 19 3 1 #"\""
0 0 24 3 2 #")]"
0 0 20 3 4 #" and"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"other-doc"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"lib"
0 0 24 3 1 #" "
0 0 19 3 44 #"\"typed-racket/scribblings/ts-reference.scrbl"
0 0 19 3 1 #"\""
0 0 24 3 2 #")]"
0 0 20 3 1 #" "
0 0 20 3 7 #"provide"
0 0 20 3 5 #" good"
0 0 24 29 1 #"\n"
0 0 20 3 13 #"documentation"
0 0 20 3 1 #" "
0 0 20 3 3 #"for"
0 0 20 3 1 #" "
0 0 20 3 11 #"programmers"
0 0 20 3 1 #" "
0 0 20 3 3 #"who"
0 0 20 3 1 #" "
0 0 20 3 6 #"desire"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 4 #"use "
0 0 24 3 2 #"@|"
0 0 14 3 11 #"typedracket"
0 0 24 3 1 #"|"
0 0 20 3 9 #"; we will"
0 0 24 29 1 #"\n"
0 0 20 3 9 #"therefore"
0 0 20 3 1 #" "
0 0 20 3 4 #"keep"
0 0 20 3 1 #" "
0 0 20 3 3 #"our"
0 0 20 3 1 #" "
0 0 20 3 8 #"overview"
0 0 20 3 1 #" "
0 0 20 3 8 #"succinct"
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 5 #"gloss"
0 0 20 3 1 #" "
0 0 20 3 4 #"over"
0 0 20 3 1 #" "
0 0 20 3 4 #"most"
0 0 20 3 9 #" details."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 8 #"asection"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 6 #"atitle"
0 0 24 3 1 #"{"
0 0 20 3 38 #"Overview of Typed Racket's type system"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 8 #"asection"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"atitle"
0 0 24 3 1 #"{"
0 0 20 3 22 #"Simple primitive types"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 11 #"Typedracket"
0 0 20 3 57 #" has types matching Racket's baggage of primitive values:"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 6 #"Number"
0 0 24 3 1 #"]"
0 0 20 3 2 #", "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #"]"
0 0 20 3 2 #", "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 4 #"Char"
0 0 24 3 1 #"]"
0 0 20 3 2 #", "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 6 #"String"
0 0 24 3 1 #"]"
0 0 20 3 1 #","
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 4 #"Void"
0 0 24 3 2 #"]@"
0 0 14 3 4 #"note"
0 0 24 3 1 #"{"
0 0 20 3 4 #"The "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 4 #"Void"
0 0 24 3 1 #"]"
0 0 20 3 35 #" type contains only a single value,"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   @"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 28 3 2 #"#,"
0 0 24 3 1 #"("
0 0 14 3 4 #"void"
0 0 24 3 2 #")]"
0 0 20 3 27 #", and is equivalent to the "
0 0 24 3 1 #"@"
0 0 14 3 8 #"racketid"
0 0 24 3 1 #"["
0 0 14 3 4 #"void"
0 0 24 3 1 #"]"
0 0 20 3 8 #" type in"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   @|"
0 0 14 3 10 #"C-language"
0 0 24 3 1 #"|"
0 0 20 3 26 #". It is the equivalent of "
0 0 24 3 1 #"@"
0 0 14 3 8 #"racketid"
0 0 24 3 1 #"["
0 0 15 3 4 #"unit"
0 0 24 3 1 #"]"
0 0 20 3 4 #" of "
0 0 24 3 1 #"@"
0 0 14 3 4 #"CAML"
0 0 20 3 4 #" and"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   @|"
0 0 14 3 7 #"haskell"
0 0 24 3 1 #"|"
0 0 20 3 65
#", and is often used as the return type of functions which perform"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 45 #"side-effects. It should not be confused with "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"Nothing"
0 0 24 3 1 #"]"
0 0 20 3 12 #", the bottom"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 71
(
 #"type which is not inhabited by any value, and is similar to the type"
 #" of"
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"   @|"
0 0 14 3 7 #"haskell"
0 0 24 3 1 #"|"
0 0 20 3 3 #"'s "
0 0 24 3 1 #"@"
0 0 14 3 8 #"racketid"
0 0 24 3 1 #"["
0 0 14 3 9 #"undefined"
0 0 24 3 1 #"]"
0 0 20 3 2 #". "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"Nothing"
0 0 24 3 1 #"]"
0 0 20 3 24 #" can be used for example"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 76
(
 #"as the type of functions which never return \342\200\224 in that way"
 #" it is similar to"
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"   @|"
0 0 14 3 10 #"C-language"
0 0 24 3 1 #"|"
0 0 20 3 3 #"'s "
0 0 24 3 1 #"@"
0 0 14 3 2 #"tt"
0 0 24 3 1 #"["
0 0 19 3 1 #"\""
0 0 19 3 13 #"__attribute__"
0 0 19 3 3 #" (("
0 0 19 3 14 #"__noreturn__))"
0 0 19 3 1 #"\""
0 0 24 3 1 #"]"
0 0 20 3 1 #"."
0 0 24 3 1 #"}"
0 0 20 3 11 #" and so on."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 8 #"examples"
0 0 24 3 1 #"["
0 0 23 3 7 #"#:label"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:eval"
0 0 24 3 2 #" ("
0 0 14 3 7 #"tr-eval"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"ann"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 21 3 3 #"243"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 13 #"\"Hello world\""
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 21 3 1 #"#"
0 0 21 3 2 #"\\c"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 12 #"code:comment"
0 0 24 3 1 #" "
0 0 19 3 43 #"\"The void function produces the void value\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 12 #"code:comment"
0 0 24 3 1 #" "
0 0 19 3 43 #"\"Void values on their own are not printed,\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 12 #"code:comment"
0 0 24 3 1 #" "
0 0 19 3 46 #"\"so we place it in a list to make it visible.\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"void"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"For"
0 0 20 3 1 #" "
0 0 20 3 7 #"numbers"
0 0 20 3 2 #", "
0 0 24 3 2 #"@|"
0 0 14 3 11 #"typedracket"
0 0 24 3 1 #"|"
0 0 20 3 1 #" "
0 0 20 3 6 #"offers"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 2 #"``"
0 0 20 3 7 #"numeric"
0 0 20 3 1 #" "
0 0 20 3 5 #"tower"
0 0 20 3 2 #"''"
0 0 20 3 3 #" of"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 21 #"partially-overlapping"
0 0 20 3 1 #" "
0 0 20 3 7 #"types: "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 16 #"Positive-Integer"
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 7 #"subtype"
0 0 20 3 3 #" of"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"Integer"
0 0 24 3 1 #"]"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 5 #"which"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 6 #"itself"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 7 #"subtype"
0 0 20 3 1 #" "
0 0 20 3 3 #"of "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 6 #"Number"
0 0 24 3 1 #"]"
0 0 20 3 2 #". "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 4 #"Zero"
0 0 24 3 1 #"]"
0 0 20 3 1 #","
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 4 #"type"
0 0 20 3 1 #" "
0 0 20 3 10 #"containing"
0 0 20 3 1 #" "
0 0 20 3 4 #"only"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 6 #"number"
0 0 20 3 1 #" "
0 0 20 3 1 #"0"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 4 #"both"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 7 #"subtype"
0 0 20 3 3 #" of"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 19 #"Nonnegative-Integer"
0 0 24 3 1 #"]"
0 0 20 3 2 #" ("
0 0 20 3 7 #"numbers"
0 0 20 3 1 #" "
0 0 20 3 3 #"\342\211\245"
0 0 20 3 1 #" "
0 0 20 3 1 #"0"
0 0 20 3 2 #") "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 3 #"of "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 19 #"Nonpositive-Integer"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 1 #"("
0 0 20 3 7 #"numbers"
0 0 20 3 1 #" "
0 0 20 3 3 #"\342\211\244"
0 0 20 3 1 #" "
0 0 20 3 1 #"0"
0 0 20 3 2 #")."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  @|"
0 0 14 3 11 #"Typedracket"
0 0 24 3 1 #"|"
0 0 20 3 1 #" "
0 0 20 3 4 #"also"
0 0 20 3 1 #" "
0 0 20 3 8 #"includes"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 9 #"singleton"
0 0 20 3 1 #" "
0 0 20 3 4 #"type"
0 0 20 3 1 #" "
0 0 20 3 3 #"for"
0 0 20 3 1 #" "
0 0 20 3 4 #"each"
0 0 20 3 1 #" "
0 0 20 3 9 #"primitive"
0 0 20 3 1 #" "
0 0 20 3 5 #"value"
0 0 20 3 3 #" of"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 5 #"these"
0 0 20 3 1 #" "
0 0 20 3 6 #"types:"
0 0 20 3 1 #" "
0 0 20 3 2 #"we"
0 0 20 3 1 #" "
0 0 20 3 7 #"already"
0 0 20 3 1 #" "
0 0 20 3 10 #"mentioned "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 4 #"Zero"
0 0 24 3 1 #"]"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 5 #"which"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 2 #"an"
0 0 20 3 1 #" "
0 0 20 3 5 #"alias"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 4 #" the"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 5 #"type."
0 0 20 3 1 #" "
0 0 20 3 5 #"Every"
0 0 20 3 1 #" "
0 0 20 3 6 #"number"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 9 #"character"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 6 #"string"
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 7 #"boolean"
0 0 20 3 1 #" "
0 0 20 3 5 #"value"
0 0 20 3 1 #" "
0 0 20 3 3 #"can"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 5 #" used"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 2 #"as"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 4 #"type"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 5 #"which"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 4 #"only"
0 0 20 3 1 #" "
0 0 20 3 9 #"inhabited"
0 0 20 3 1 #" "
0 0 20 3 2 #"by"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 4 #"same"
0 0 20 3 1 #" "
0 0 20 3 6 #"number"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 9 #"character"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 6 #"string"
0 0 20 3 3 #" or"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 7 #"boolean"
0 0 20 3 1 #" "
0 0 20 3 6 #"value."
0 0 20 3 1 #" "
0 0 20 3 3 #"For"
0 0 20 3 1 #" "
0 0 20 3 7 #"example"
0 0 20 3 2 #", "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 3 #"243"
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 7 #"belongs"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 9 #"singleton"
0 0 20 3 5 #" type"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 3 #"243"
0 0 24 3 1 #"]"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 5 #"which"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 7 #"subtype"
0 0 20 3 1 #" "
0 0 20 3 3 #"of "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 16 #"Positive-Integer"
0 0 24 3 1 #"]"
0 0 20 3 1 #"."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 8 #"examples"
0 0 24 3 1 #"["
0 0 23 3 7 #"#:label"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:eval"
0 0 24 3 2 #" ("
0 0 14 3 7 #"tr-eval"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"ann"
0 0 24 3 1 #" "
0 0 21 3 3 #"243"
0 0 24 3 1 #" "
0 0 21 3 3 #"243"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"]}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 8 #"asection"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"atitle"
0 0 24 3 1 #"{"
0 0 20 3 15 #"Pairs and lists"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 76
(
 #"Pairs are the central data structure of most Lisp dialects. They are"
 #" used to"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 43 #"build linked lists of pairs, terminated by "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 20 3 23 #", the null element. The"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 26 #"null element has the type "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 4 #"Null"
0 0 24 3 1 #"]"
0 0 20 3 38 #", while the pairs which build the list"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 14 #"have the type "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 14 3 2 #"_A"
0 0 24 3 1 #" "
0 0 14 3 2 #"_B"
0 0 24 3 2 #")]"
0 0 20 3 8 #", where "
0 0 24 3 1 #"@"
0 0 14 3 8 #"racketid"
0 0 24 3 1 #"["
0 0 14 3 2 #"_A"
0 0 24 3 1 #"]"
0 0 20 3 5 #" and "
0 0 24 3 1 #"@"
0 0 14 3 8 #"racketid"
0 0 24 3 1 #"["
0 0 14 3 2 #"_B"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 73
(
 #"are replaced by the actual types for the first and second elements o"
 #"f the"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 40 #"pair. For example, the pair built using "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"729"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 2 #")]"
0 0 20 3 7 #", which"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 9 #"contains "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 3 #"729"
0 0 24 3 1 #"]"
0 0 20 3 27 #" as its first element, and "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 5 #"#true"
0 0 24 3 1 #"]"
0 0 20 3 14 #" as its second"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 22 #"element, has the type "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 2 #")]"
0 0 20 3 19 #", or using the most"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 25 #"precise singleton types, "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 21 3 3 #"729"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 2 #")]"
0 0 20 3 1 #"."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 8 #"examples"
0 0 24 3 1 #"["
0 0 23 3 7 #"#:label"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:eval"
0 0 24 3 2 #" ("
0 0 14 3 7 #"tr-eval"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"729"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 3 #"729"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 13 #"Heterogeneous"
0 0 20 3 1 #" "
0 0 20 3 6 #"linked"
0 0 20 3 1 #" "
0 0 20 3 5 #"lists"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 5 #"fixed"
0 0 20 3 1 #" "
0 0 20 3 6 #"length"
0 0 20 3 1 #" "
0 0 20 3 3 #"can"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 1 #" "
0 0 20 3 5 #"given"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 7 #"precise"
0 0 20 3 1 #" "
0 0 20 3 7 #"type by"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 7 #"nesting"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 4 #"same"
0 0 20 3 1 #" "
0 0 20 3 6 #"number"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 5 #"pairs"
0 0 20 3 1 #" "
0 0 20 3 2 #"at"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 4 #"type"
0 0 20 3 1 #" "
0 0 20 3 6 #"level."
0 0 20 3 1 #" "
0 0 20 3 3 #"For"
0 0 20 3 1 #" "
0 0 20 3 7 #"example"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 8 #"the list"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 5 #"built"
0 0 20 3 6 #" with "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"81"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"hello"
0 0 24 3 2 #")]"
0 0 20 3 1 #" "
0 0 20 3 3 #"has"
0 0 20 3 1 #" "
0 0 20 3 8 #"the type"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 4 #"List"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 2 #")]"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 5 #"which"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 9 #"shorthand"
0 0 20 3 1 #" "
0 0 20 3 3 #"for"
0 0 20 3 1 #" "
0 0 20 3 8 #"the type"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 1 #" "
0 0 14 3 4 #"Null"
0 0 24 3 4 #")))]"
0 0 20 3 1 #"."
0 0 20 3 1 #" "
0 0 20 3 8 #"Lists in"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  @|"
0 0 14 3 11 #"typedracket"
0 0 24 3 1 #"|"
0 0 20 3 1 #" "
0 0 20 3 3 #"can"
0 0 20 3 1 #" "
0 0 20 3 4 #"thus"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 1 #" "
0 0 20 3 4 #"seen"
0 0 20 3 1 #" "
0 0 20 3 2 #"as"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 10 #"equivalent"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 5 #"chain"
0 0 20 3 1 #" "
0 0 20 3 9 #"of nested"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 8 #"2-tuples"
0 0 20 3 1 #" "
0 0 20 3 2 #"in"
0 0 20 3 1 #" "
0 0 20 3 9 #"languages"
0 0 20 3 6 #" like "
0 0 24 3 2 #"@|"
0 0 14 3 4 #"CAML"
0 0 24 3 1 #"|"
0 0 20 3 4 #" or "
0 0 24 3 2 #"@|"
0 0 14 3 7 #"haskell"
0 0 24 3 1 #"|"
0 0 20 3 1 #"."
0 0 20 3 5 #" The "
0 0 29 3 6 #"analog"
0 0 20 3 3 #" in"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 15 #"object-oriented"
0 0 20 3 1 #" "
0 0 20 3 9 #"languages"
0 0 20 3 1 #" "
0 0 20 3 4 #"with"
0 0 20 3 1 #" "
0 0 20 3 7 #"support"
0 0 20 3 1 #" "
0 0 20 3 3 #"for"
0 0 20 3 1 #" "
0 0 20 3 8 #"generics"
0 0 20 3 1 #" "
0 0 20 3 5 #"would"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 1 #" "
0 0 20 3 7 #"a class"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 2 #"tt"
0 0 24 3 1 #"["
0 0 19 3 1 #"\""
0 0 19 3 6 #"Pair<A"
0 0 19 3 1 #","
0 0 19 3 3 #" B>"
0 0 19 3 1 #"\""
0 0 24 3 1 #"]"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 5 #"where"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 7 #"generic"
0 0 20 3 1 #" "
0 0 20 3 4 #"type"
0 0 20 3 10 #" argument "
0 0 24 3 1 #"@"
0 0 14 3 8 #"racketid"
0 0 24 3 1 #"["
0 0 14 3 1 #"B"
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 8 #"could be"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 12 #"instantiated"
0 0 20 3 1 #" "
0 0 20 3 2 #"by"
0 0 20 3 1 #" "
0 0 20 3 7 #"another"
0 0 20 3 1 #" "
0 0 20 3 8 #"instance"
0 0 20 3 4 #" of "
0 0 24 3 1 #"@"
0 0 14 3 2 #"tt"
0 0 24 3 1 #"["
0 0 19 3 5 #"\"Pair"
0 0 19 3 1 #"\""
0 0 24 3 1 #"]"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 7 #" so on."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 8 #"examples"
0 0 24 3 1 #"["
0 0 23 3 7 #"#:label"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:eval"
0 0 24 3 2 #" ("
0 0 14 3 7 #"tr-eval"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"81"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"hello"
0 0 24 3 1 #" "
0 0 14 3 4 #"null"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"ann"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"81"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"hello"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 1 #" "
0 0 14 3 4 #"Null"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"The"
0 0 20 3 1 #" "
0 0 20 3 4 #"type"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 15 #"variable-length"
0 0 20 3 1 #" "
0 0 20 3 11 #"homogeneous"
0 0 20 3 1 #" "
0 0 20 3 6 #"linked"
0 0 20 3 1 #" "
0 0 20 3 5 #"lists"
0 0 20 3 1 #" "
0 0 20 3 3 #"can"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 1 #" "
0 0 20 3 9 #"described"
0 0 20 3 6 #" using"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 4 #"the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 6 #"Listof"
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 4 #"type"
0 0 20 3 1 #" "
0 0 20 3 9 #"operator."
0 0 20 3 1 #" "
0 0 20 3 3 #"The"
0 0 20 3 1 #" "
0 0 20 3 5 #"type "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #")]"
0 0 20 3 3 #" is"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 10 #"equivalent"
0 0 20 3 1 #" "
0 0 20 3 3 #"to "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 3 #"Rec"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 2 #") "
0 0 14 3 4 #"Null"
0 0 24 3 3 #"))]"
0 0 20 3 1 #"."
0 0 20 3 1 #" "
0 0 20 3 4 #"The "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 3 #"Rec"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 4 #"type"
0 0 20 3 1 #" "
0 0 20 3 8 #"operator"
0 0 20 3 1 #" "
0 0 20 3 10 #"describes "
0 0 24 3 1 #"@"
0 0 14 3 7 #"seclink"
0 0 24 3 1 #"["
0 0 19 3 32 #"\"tr-presentation-recursive-types"
0 0 19 3 1 #"\""
0 0 24 3 2 #"]{"
0 0 20 3 9 #"recursive"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 5 #"types"
0 0 24 3 1 #"}"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 4 #"and "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 1 #"U"
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 10 #"describes "
0 0 24 3 1 #"@"
0 0 14 3 7 #"seclink"
0 0 24 3 1 #"["
0 0 19 3 23 #"\"tr-presentation-unions"
0 0 19 3 1 #"\""
0 0 24 3 2 #"]{"
0 0 20 3 6 #"unions"
0 0 24 3 1 #"}"
0 0 20 3 1 #"."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 4 #"Both"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 5 #"these"
0 0 20 3 1 #" "
0 0 20 3 8 #"features"
0 0 20 3 1 #" "
0 0 20 3 3 #"are"
0 0 20 3 1 #" "
0 0 20 3 9 #"described"
0 0 20 3 1 #" "
0 0 20 3 5 #"below"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"for"
0 0 20 3 1 #" "
0 0 20 3 3 #"now"
0 0 20 3 1 #" "
0 0 20 3 2 #"we"
0 0 20 3 1 #" "
0 0 20 3 4 #"will"
0 0 20 3 1 #" "
0 0 20 3 6 #"simply"
0 0 20 3 1 #" "
0 0 20 3 3 #"say"
0 0 20 3 5 #" that"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 10 #"previously"
0 0 20 3 1 #" "
0 0 20 3 5 #"given"
0 0 20 3 1 #" "
0 0 20 3 4 #"type"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 9 #"recursive"
0 0 20 3 1 #" "
0 0 20 3 5 #"type "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 1 #"R"
0 0 24 3 1 #"]"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 5 #"which"
0 0 20 3 1 #" "
0 0 20 3 3 #"can"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 2 #" a"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 2 #")]"
0 0 20 3 1 #" "
0 0 20 3 3 #"or "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 4 #"Null"
0 0 24 3 1 #"]"
0 0 20 3 2 #" ("
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 9 #"terminate"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 6 #"linked"
0 0 20 3 1 #" "
0 0 20 3 4 #"list"
0 0 20 3 2 #")."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 8 #"examples"
0 0 24 3 1 #"["
0 0 23 3 7 #"#:label"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:eval"
0 0 24 3 2 #" ("
0 0 14 3 7 #"tr-eval"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"ann"
0 0 24 3 2 #" ("
0 0 14 3 5 #"range"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 4 #"))]}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 8 #"asection"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"atitle"
0 0 24 3 1 #"{"
0 0 20 3 7 #"Symbols"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 30 #"Another of Racket's primitive "
0 0 29 3 9 #"datatypes"
0 0 20 3 33 #" is symbols. Symbols are interned"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 78
(
 #"strings: two occurrences of a symbol produce values which are pointe"
 #"r-equal if"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 59
#"the symbols are equal (i.e. they represent the same string)"
0 0 24 3 1 #"@"
0 0 14 3 4 #"note"
0 0 24 3 1 #"{"
0 0 20 3 12 #"This is true"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 43 #"with the exception of symbols created with "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 6 #"gensym"
0 0 24 3 1 #"]"
0 0 20 3 14 #" and the like."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   @"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 6 #"gensym"
0 0 24 3 1 #"]"
0 0 20 3 61
#" produces a fresh symbol which is not interned, and therefore"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 75
(
 #"different from all existing symbols, and different from all symbols "
 #"created"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 14 #"in the future."
0 0 24 3 1 #"}"
0 0 20 3 1 #"."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  @|"
0 0 14 3 11 #"Typedracket"
0 0 24 3 1 #"|"
0 0 20 3 14 #" includes the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 6 #"Symbol"
0 0 24 3 1 #"]"
0 0 20 3 27 #" type, to which all symbols"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 73
(
 #"belong. Additionally, there is a singleton type for each symbol: the"
 #" type"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 14 3 3 #"foo"
0 0 24 3 1 #"]"
0 0 20 3 33 #" is only inhabited by the symbol "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 14 3 3 #"foo"
0 0 24 3 1 #"]"
0 0 20 3 1 #"."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 8 #"examples"
0 0 24 3 1 #"["
0 0 23 3 7 #"#:label"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:eval"
0 0 24 3 2 #" ("
0 0 14 3 7 #"tr-eval"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 21 3 1 #"'"
0 0 14 3 3 #"foo"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 73
(
 #"Singleton types containing symbols can be seen as similar to constru"
 #"ctors"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 21 #"without arguments in "
0 0 24 3 2 #"@|"
0 0 14 3 4 #"CAML"
0 0 24 3 1 #"|"
0 0 20 3 5 #" and "
0 0 24 3 2 #"@|"
0 0 14 3 7 #"haskell"
0 0 24 3 1 #"|"
0 0 20 3 25 #", and as globally unique "
0 0 29 3 4 #"enum"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 77
(
 #"values in object-oriented languages. The main difference resides in "
 #"the scope"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 76
(
 #"of the declaration: two constructor declarations with identical name"
 #"s in two"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 75
(
 #"separate files will usually give distinct types and values. Similarl"
 #"y, when"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 22 #"using the ``type-safe "
0 0 29 3 4 #"enum"
0 0 20 3 42 #"'' design pattern, two otherwise identical"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 19 #"declarations of an "
0 0 29 3 4 #"enum"
0 0 20 3 52 #" will yield objects of different types. In contrast,"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 46 #"two uses of an interned symbols in Racket and "
0 0 24 3 2 #"@|"
0 0 14 3 11 #"typedracket"
0 0 24 3 1 #"|"
0 0 20 3 13 #" will produce"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 65
#"identical values and types. A way of seeing this is that symbols "
0 0 20 3 4 #"are "
0 0 20 3 7 #"similar"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 2 #"to"
0 0 20 3 18 #" constructors (in "
0 0 20 3 4 #"the "
0 0 20 3 11 #"functional "
0 0 20 3 12 #"programming "
0 0 20 3 10 #"sense) or "
0 0 29 3 5 #"enums"
0 0 20 3 10 #" which are"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 29 #"implicitly declared globally."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 8 #"examples"
0 0 24 3 1 #"["
0 0 23 3 7 #"#:label"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:eval"
0 0 24 3 2 #" ("
0 0 14 3 7 #"tr-eval"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"module"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 14 3 12 #"typed/racket"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"sym1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"foo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 4 #"sym1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"module"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 1 #" "
0 0 14 3 12 #"typed/racket"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"sym2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"foo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 4 #"sym2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"m2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 12 #"code:comment"
0 0 24 3 1 #" "
0 0 19 3 49 #"\"The tow independent uses of 'foo are identical:\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sym1"
0 0 24 3 1 #" "
0 0 14 3 4 #"sym2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" }"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 8 #"asection"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"atitle"
0 0 24 3 1 #"["
0 0 23 3 5 #"#:tag"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"tr-presentation-unions"
0 0 19 3 1 #"\""
0 0 24 3 2 #"]{"
0 0 20 3 6 #"Unions"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 77
(
 #"These singleton types may not seem very useful on their own. They ca"
 #"n however"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 65
#"be combined together with union types, which are built using the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 1 #"U"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 14 #"type operator."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 15 #"The union type "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #")]"
0 0 20 3 28 #" is inhabited by the values "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 20 3 1 #","
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"1"
0 0 24 3 1 #"]"
0 0 20 3 5 #" and "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"2"
0 0 24 3 1 #"]"
0 0 20 3 29 #", and by no other value. The "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #"]"
0 0 20 3 8 #" type is"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 20 #"actually defined as "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 2 #")]"
0 0 20 3 33 #", i.e. the union of the singleton"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 21 #"types containing the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 5 #"#true"
0 0 24 3 1 #"]"
0 0 20 3 5 #" and "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 6 #"#false"
0 0 24 3 1 #"]"
0 0 20 3 22 #" values, respectively."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 4 #"The "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"Nothing"
0 0 24 3 1 #"]"
0 0 20 3 57 #" type, which is not inhabited by any value, is defined as"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 16 #"the empty union "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 1 #"U"
0 0 24 3 2 #")]"
0 0 20 3 11 #". The type "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 3 #"Any"
0 0 24 3 1 #"]"
0 0 20 3 25 #" is the top type, i.e. it"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 78
(
 #"is a super-type of all other types, and can be seen as a large union"
 #" including"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 73
(
 #"all other types, including those which will be declared later or in "
 #"other"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 14 #"units of code."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 69
(
 #"Unions of symbols are similar to variants which contain zero-argumen"
 #"t"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 17 #"constructors, in "
0 0 24 3 2 #"@|"
0 0 14 3 4 #"CAML"
0 0 24 3 1 #"|"
0 0 20 3 4 #" or "
0 0 24 3 2 #"@|"
0 0 14 3 7 #"haskell"
0 0 24 3 1 #"|"
0 0 20 3 1 #"."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 8 #"examples"
0 0 24 3 1 #"["
0 0 23 3 7 #"#:label"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:eval"
0 0 24 3 2 #" ("
0 0 14 3 7 #"tr-eval"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"foo"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"bar"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"foo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 1 #"v"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"bar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 1 #"v"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 12 #"code:comment"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"This"
0 0 19 3 1 #" "
0 0 19 3 6 #"throws"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 5 #"error"
0 0 19 3 1 #" "
0 0 19 3 2 #"at"
0 0 19 3 14 #" compile-time:"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 10 #"eval:error"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"oops"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 1 #"A"
0 0 20 3 1 #" "
0 0 20 3 5 #"union"
0 0 20 3 1 #" "
0 0 20 3 4 #"such"
0 0 20 3 1 #" "
0 0 20 3 3 #"as "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"ca"
0 0 24 3 2 #" ("
0 0 14 3 4 #"List"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"cb"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 3 #") ("
0 0 14 3 4 #"List"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"cc"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"can"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 1 #" "
0 0 20 3 4 #"seen"
0 0 20 3 1 #" "
0 0 20 3 2 #"as"
0 0 20 3 1 #" "
0 0 20 3 7 #"roughly"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 10 #"equivalent"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 7 #"variant"
0 0 20 3 1 #" "
0 0 20 3 4 #"with"
0 0 20 3 1 #" "
0 0 20 3 5 #"three"
0 0 20 3 1 #" "
0 0 20 3 13 #"constructors,"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 8 #"racketid"
0 0 24 3 1 #"["
0 0 14 3 2 #"ca"
0 0 24 3 1 #"]"
0 0 20 3 2 #", "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 2 #"cb"
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 4 #"and "
0 0 24 3 1 #"@"
0 0 14 3 8 #"racketid"
0 0 24 3 1 #"["
0 0 14 3 2 #"cc"
0 0 24 3 1 #"]"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 5 #"where"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 5 #"first"
0 0 20 3 1 #" "
0 0 20 3 3 #"has"
0 0 20 3 3 #" no"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 9 #"arguments"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 6 #"second"
0 0 20 3 1 #" "
0 0 20 3 3 #"has"
0 0 20 3 1 #" "
0 0 20 3 3 #"one"
0 0 20 3 1 #" "
0 0 20 3 8 #"argument"
0 0 20 3 2 #" ("
0 0 20 3 2 #"a "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 6 #"Number"
0 0 24 3 1 #"]"
0 0 20 3 1 #")"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 5 #"third"
0 0 20 3 4 #" has"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"two"
0 0 20 3 1 #" "
0 0 20 3 9 #"arguments"
0 0 20 3 2 #" ("
0 0 20 3 2 #"a "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 6 #"String"
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 2 #"a "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 6 #"Symbol"
0 0 24 3 1 #"]"
0 0 20 3 2 #")."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"The"
0 0 20 3 1 #" "
0 0 20 3 4 #"main"
0 0 20 3 1 #" "
0 0 20 3 10 #"difference"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 4 #"that"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 6 #"symbol"
0 0 20 3 1 #" "
0 0 20 3 3 #"can"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 1 #" "
0 0 20 3 4 #"used"
0 0 20 3 1 #" "
0 0 20 3 2 #"as"
0 0 20 3 1 #" "
0 0 20 3 5 #"parts"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 7 #"several"
0 0 20 3 1 #" "
0 0 20 3 7 #"unions,"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 5 #"e.g. "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 2 #")]"
0 0 20 3 1 #" "
0 0 20 3 4 #"and "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 2 #")]"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 5 #"while"
0 0 20 3 1 #" "
0 0 20 3 12 #"constructors"
0 0 20 3 1 #" "
0 0 20 3 3 #"can"
0 0 20 3 6 #" often"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 4 #"only"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 1 #" "
0 0 20 3 4 #"part"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 7 #"variant"
0 0 20 3 1 #" "
0 0 20 3 4 #"used"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 7 #"declare"
0 0 20 3 1 #" "
0 0 20 3 5 #"them."
0 0 20 3 1 #" "
0 0 20 3 6 #"Unions"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 7 #"symbols"
0 0 20 3 1 #" "
0 0 20 3 3 #"are"
0 0 20 3 3 #" in"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 4 #"this"
0 0 20 3 1 #" "
0 0 20 3 5 #"sense"
0 0 20 3 1 #" "
0 0 20 3 6 #"closer"
0 0 20 3 1 #" "
0 0 20 3 3 #"to "
0 0 24 3 2 #"@|"
0 0 14 3 4 #"CAML"
0 0 24 3 1 #"|"
0 0 20 3 1 #"'"
0 0 20 3 1 #"s"
0 0 20 3 1 #" "
0 0 20 3 9 #"so-called"
0 0 20 3 12 #" polymorphic"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 8 #"variants"
0 0 24 3 1 #"@"
0 0 14 3 5 #"~cite"
0 0 24 3 1 #"["
0 0 19 3 21 #"\"minskyRealWorldOCaml"
0 0 19 3 1 #"\""
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 4 #"than"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 7 #"regular"
0 0 20 3 10 #" variants."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 8 #"examples"
0 0 24 3 1 #"["
0 0 23 3 7 #"#:label"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:eval"
0 0 24 3 2 #" ("
0 0 14 3 7 #"tr-eval"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 10 #"my-variant"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"ca"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 4 #"List"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"cb"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 4 #"List"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"cc"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"v\342\202\201"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"my-variant"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"ca"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"v\342\202\202"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"my-variant"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"cb"
0 0 24 3 1 #" "
0 0 21 3 4 #"2187"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"v3"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"my-variant"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"cc"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Hello"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"world"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 7 #"Finally"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 2 #"it"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 8 #"possible"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 3 #"mix"
0 0 20 3 1 #" "
0 0 20 3 9 #"different"
0 0 20 3 1 #" "
0 0 20 3 5 #"sorts"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 5 #"types"
0 0 20 3 1 #" "
0 0 20 3 6 #"within"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 5 #" same"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 6 #"union:"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 5 #"type "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"other"
0 0 24 3 2 #")]"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 9 #"inhabited"
0 0 20 3 1 #" "
0 0 20 3 2 #"by"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 7 #" number"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 8 #"boolean "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 5 #"#true"
0 0 24 3 1 #"]"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 7 #"symbol "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 14 3 5 #"other"
0 0 24 3 1 #"]"
0 0 20 3 1 #"."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 11 #"Translating"
0 0 20 3 1 #" "
0 0 20 3 4 #"such"
0 0 20 3 1 #" "
0 0 20 3 2 #"an"
0 0 20 3 1 #" "
0 0 20 3 5 #"union"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 8 #"language"
0 0 20 3 1 #" "
0 0 20 3 5 #"like "
0 0 24 3 2 #"@|"
0 0 14 3 4 #"CAML"
0 0 24 3 1 #"|"
0 0 20 3 1 #" "
0 0 20 3 5 #"could"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 1 #" "
0 0 20 3 4 #"done"
0 0 20 3 3 #" by"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 10 #"explicitly"
0 0 20 3 1 #" "
0 0 20 3 7 #"tagging"
0 0 20 3 1 #" "
0 0 20 3 4 #"each"
0 0 20 3 1 #" "
0 0 20 3 4 #"case"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 5 #"union"
0 0 20 3 1 #" "
0 0 20 3 4 #"with"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 8 #"distinct"
0 0 20 3 13 #" constructor."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 19 #"Implementation-wise"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"all"
0 0 20 3 1 #" "
0 0 20 3 6 #"values"
0 0 20 3 1 #" "
0 0 20 3 2 #"in"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 9 #"so-called"
0 0 20 3 3 #" ``"
0 0 29 3 7 #"untyped"
0 0 20 3 2 #"''"
0 0 20 3 1 #" "
0 0 20 3 7 #"version"
0 0 20 3 3 #" of"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 6 #"Racket"
0 0 20 3 1 #" "
0 0 20 3 3 #"are"
0 0 20 3 1 #" "
0 0 20 3 7 #"tagged:"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 3 #"few"
0 0 20 3 1 #" "
0 0 20 3 4 #"bits"
0 0 20 3 1 #" "
0 0 20 3 6 #"within"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 5 #"value"
0 0 20 3 1 #"'"
0 0 20 3 1 #"s"
0 0 20 3 1 #" "
0 0 20 3 14 #"representation"
0 0 20 3 1 #" "
0 0 20 3 3 #"are"
0 0 20 3 9 #" reserved"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 4 #"used"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 6 #"encode"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 5 #"value"
0 0 20 3 1 #"'"
0 0 20 3 1 #"s"
0 0 20 3 1 #" "
0 0 20 3 5 #"type."
0 0 20 3 1 #" "
0 0 20 3 4 #"When"
0 0 20 3 1 #" "
0 0 20 3 11 #"considering"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 6 #"target"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 8 #" pointer"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 2 #"in"
0 0 20 3 1 #" "
0 0 20 3 6 #"memory"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 6 #"Racket"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 9 #"therefore"
0 0 20 3 1 #" "
0 0 20 3 4 #"able"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 9 #"determine"
0 0 20 3 1 #" "
0 0 20 3 2 #"if"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 10 #"pointed-to"
0 0 20 3 1 #" "
0 0 20 3 5 #"value"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 2 #" a"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 6 #"number"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 7 #"boolean"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 6 #"string"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 6 #"symbol"
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 2 #"so"
0 0 20 3 1 #" "
0 0 20 3 3 #"on."
0 0 20 3 1 #" "
0 0 20 3 5 #"Typed"
0 0 20 3 1 #" "
0 0 20 3 6 #"Racket"
0 0 20 3 1 #" "
0 0 20 3 9 #"preserves"
0 0 20 3 6 #" these"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 8 #"run-time"
0 0 20 3 1 #" "
0 0 20 3 5 #"tags."
0 0 20 3 1 #" "
0 0 20 3 4 #"They"
0 0 20 3 1 #" "
0 0 20 3 3 #"can"
0 0 20 3 1 #" "
0 0 20 3 4 #"then"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 1 #" "
0 0 20 3 4 #"used"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 6 #"detect"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 8 #"concrete"
0 0 20 3 1 #" "
0 0 20 3 4 #"type"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 6 #" value"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 4 #"when"
0 0 20 3 1 #" "
0 0 20 3 3 #"its"
0 0 20 3 1 #" "
0 0 20 3 6 #"static"
0 0 20 3 1 #" "
0 0 20 3 4 #"type"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 6 #"union."
0 0 20 3 1 #" "
0 0 20 3 4 #"This"
0 0 20 3 1 #" "
0 0 20 3 9 #"detection"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 4 #"done"
0 0 20 3 1 #" "
0 0 20 3 6 #"simply"
0 0 20 3 1 #" "
0 0 20 3 2 #"by"
0 0 20 3 6 #" using"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 6 #"Racket"
0 0 20 3 1 #"'"
0 0 20 3 1 #"s"
0 0 20 3 1 #" "
0 0 20 3 12 #"predicates: "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"number?"
0 0 24 3 1 #"]"
0 0 20 3 2 #", "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"string?"
0 0 24 3 1 #"]"
0 0 20 3 2 #", "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 4 #"etc."
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 8 #"asection"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"atitle"
0 0 24 3 1 #"{"
0 0 20 3 13 #"Intersections"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 74
(
 #"Intersections are the converse of unions: instead of allowing a mixt"
 #"ure of"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 68
#"values of different types, an intersection type, described using the"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 3 #"\342\210\251"
0 0 24 3 1 #"]"
0 0 20 3 61
#" type operator, only allows values which belong to all types."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 22 #"The intersection type "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 3 #"\342\210\251"
0 0 24 3 1 #" "
0 0 14 3 19 #"Nonnegative-Integer"
0 0 24 3 1 #" "
0 0 14 3 19 #"Nonpositive-Integer"
0 0 24 3 2 #")]"
0 0 20 3 3 #" is"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 19 #"the singleton type "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 20 3 22 #". The intersection of "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 2 #")]"
0 0 20 3 4 #" and"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"d"
0 0 24 3 2 #")]"
0 0 20 3 9 #" will be "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 2 #")]"
0 0 20 3 5 #", as "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #"]"
0 0 20 3 4 #" and"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 1 #"]"
0 0 20 3 23 #" belong to both unions."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 8 #"examples"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:label"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:eval"
0 0 24 3 2 #" ("
0 0 14 3 7 #"tr-eval"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 12 #"code:comment"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #":type"
0 0 19 3 1 #" "
0 0 19 3 5 #"shows"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 5 #"given"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 2 #"or"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 10 #"simplified"
0 0 19 3 1 #" "
0 0 19 3 7 #"version"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 3 #" it"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #":type"
0 0 24 3 2 #" ("
0 0 14 3 3 #"\342\210\251"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"d"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  @|"
0 0 14 3 11 #"Typedracket"
0 0 24 3 1 #"|"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 4 #"able"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 6 #"reduce"
0 0 20 3 1 #" "
0 0 20 3 4 #"some"
0 0 20 3 1 #" "
0 0 20 3 13 #"intersections"
0 0 20 3 1 #" "
0 0 20 3 4 #"such"
0 0 20 3 1 #" "
0 0 20 3 2 #"as"
0 0 20 3 1 #" "
0 0 20 3 17 #"those given above"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 2 #"at"
0 0 20 3 1 #" "
0 0 20 3 13 #"compile-time."
0 0 20 3 1 #" "
0 0 20 3 7 #"However"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 2 #"in"
0 0 20 3 1 #" "
0 0 20 3 4 #"some"
0 0 20 3 1 #" "
0 0 20 3 5 #"cases"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 2 #"it"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 6 #"forced"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 21 #"keep the intersection"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 4 #"type"
0 0 20 3 1 #" "
0 0 20 3 6 #"as-is."
0 0 20 3 1 #" "
0 0 20 3 13 #"For example, "
0 0 29 3 7 #"structs"
0 0 20 3 2 #" ("
0 0 24 3 1 #"@"
0 0 14 3 7 #"seclink"
0 0 24 3 1 #"["
0 0 19 3 24 #"\"tr-presentation-structs"
0 0 19 3 1 #"\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 29 3 10 #"describled"
0 0 20 3 6 #" below"
0 0 24 3 1 #"}"
0 0 20 3 1 #" "
0 0 20 3 3 #"can"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 5 #"using"
0 0 20 3 1 #" "
0 0 20 3 7 #"special"
0 0 20 3 1 #" "
0 0 20 3 10 #"properties"
0 0 20 3 1 #","
0 0 20 3 28 #" impersonate functions. This"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 24 #"mechanism is similar to "
0 0 29 3 5 #"PHP's"
0 0 20 3 1 #" "
0 0 24 3 1 #"@"
0 0 14 3 2 #"tt"
0 0 24 3 1 #"["
0 0 19 3 9 #"\"__invoke"
0 0 19 3 1 #"\""
0 0 24 3 1 #"]"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 20 #" ability to overload"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 2 #"tt"
0 0 24 3 1 #"["
0 0 19 3 1 #"\""
0 0 19 3 10 #"operator()"
0 0 19 3 1 #"\""
0 0 24 3 1 #"]"
0 0 20 3 4 #" in "
0 0 24 3 2 #"@|"
0 0 14 3 3 #"CPP"
0 0 24 3 1 #"|"
0 0 20 3 2 #". "
0 0 24 3 2 #"@|"
0 0 14 3 11 #"Typedracket"
0 0 24 3 1 #"|"
0 0 20 3 1 #" "
0 0 20 3 4 #"does"
0 0 20 3 1 #" "
0 0 20 3 3 #"not"
0 0 20 3 1 #" "
0 0 20 3 6 #"handle"
0 0 20 3 17 #" these properties"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 1 #"("
0 0 20 3 3 #"yet"
0 0 20 3 1 #")"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 9 #"therefore"
0 0 20 3 7 #" cannot"
0 0 20 3 10 #" determine"
0 0 20 3 1 #" "
0 0 20 3 7 #"whether"
0 0 20 3 9 #" a given "
0 0 29 3 6 #"struct"
0 0 20 3 10 #" type also"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 12 #"impersonates"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 8 #"function"
0 0 20 3 1 #" "
0 0 20 3 2 #"or"
0 0 20 3 5 #" not."
0 0 20 3 5 #" This"
0 0 20 3 1 #" "
0 0 20 3 5 #"means"
0 0 20 3 1 #" "
0 0 20 3 4 #"that"
0 0 20 3 17 #" the intersection"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 3 #"\342\210\251"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 3 #"))]"
0 0 20 3 8 #", where "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 1 #"s"
0 0 24 3 1 #"]"
0 0 20 3 6 #" is a "
0 0 29 3 6 #"struct"
0 0 20 3 1 #" "
0 0 20 3 5 #"type,"
0 0 20 3 10 #" cannot be"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 11 #"reduced to "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"Nothing"
0 0 24 3 1 #"]"
0 0 20 3 10 #", because "
0 0 24 3 2 #"@|"
0 0 14 3 11 #"typedracket"
0 0 24 3 1 #"|"
0 0 20 3 1 #" "
0 0 20 3 6 #"cannot"
0 0 20 3 18 #" determine whether"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 4 #"the "
0 0 29 3 6 #"struct"
0 0 20 3 1 #" "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 1 #"s"
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 3 #"can"
0 0 20 3 1 #" "
0 0 20 3 3 #"act"
0 0 20 3 1 #" "
0 0 20 3 2 #"as"
0 0 20 3 2 #" a"
0 0 20 3 17 #" function or not."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 7 #"Another"
0 0 20 3 17 #" situation where "
0 0 24 3 2 #"@|"
0 0 14 3 11 #"typedracket"
0 0 24 3 1 #"|"
0 0 20 3 1 #" "
0 0 20 3 6 #"cannot"
0 0 20 3 1 #" "
0 0 20 3 6 #"reduce"
0 0 20 3 1 #" "
0 0 20 3 24 #"the intersection is when"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 16 #"intersecting two"
0 0 20 3 17 #" function types ("
0 0 24 3 1 #"@"
0 0 14 3 7 #"seclink"
0 0 24 3 1 #"["
0 0 19 3 26 #"\"tr-presentation-functions"
0 0 19 3 1 #"\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 15 #"presented below"
0 0 24 3 1 #"}"
0 0 20 3 2 #")."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 3 #"\342\210\251"
0 0 24 3 2 #" ("
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 3 #") ("
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 3 #"\342\210\251"
0 0 24 3 2 #" ("
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 3 #") ("
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"The"
0 0 20 3 1 #" "
0 0 20 3 5 #"first"
0 0 20 3 1 #" "
0 0 20 3 12 #"intersection"
0 0 20 3 1 #" "
0 0 20 3 5 #"seems"
0 0 20 3 1 #" "
0 0 20 3 4 #"like"
0 0 20 3 1 #" "
0 0 20 3 5 #"could"
0 0 20 3 1 #" "
0 0 20 3 16 #"be simplified to"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 3 #") ("
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 2 #")]"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 6 #"second"
0 0 20 3 1 #" "
0 0 20 3 12 #"one could be"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 14 #"simplified to "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 3 #"\342\206\222"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 2 #") "
0 0 14 3 6 #"String"
0 0 24 3 2 #")]"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 23 #"however the equivalence"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 7 #"between"
0 0 20 3 1 #" "
0 0 20 3 5 #"these"
0 0 20 3 1 #" "
0 0 20 3 5 #"types"
0 0 20 3 1 #" "
0 0 20 3 3 #"has"
0 0 20 3 1 #" "
0 0 20 3 3 #"not"
0 0 20 3 1 #" "
0 0 20 3 4 #"been"
0 0 20 3 1 #" "
0 0 20 3 11 #"implemented"
0 0 20 3 1 #" "
0 0 20 3 9 #"(yet) in "
0 0 24 3 2 #"@|"
0 0 14 3 11 #"typedracket"
0 0 24 3 1 #"|"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 8 #"so we do"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"not"
0 0 20 3 1 #" "
0 0 20 3 4 #"rely"
0 0 20 3 1 #" "
0 0 20 3 2 #"on"
0 0 20 3 1 #" "
0 0 20 3 5 #"them."
0 0 20 3 1 #" "
0 0 20 3 4 #"Note"
0 0 20 3 1 #" "
0 0 20 3 4 #"that"
0 0 20 3 1 #" "
0 0 20 3 4 #"this"
0 0 20 3 1 #" "
0 0 20 3 5 #"issue"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 3 #"not"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 9 #"soundness"
0 0 20 3 1 #" "
0 0 20 3 14 #"issue: it only"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 8 #"prevents"
0 0 20 3 1 #" "
0 0 20 3 7 #"passing"
0 0 20 3 1 #" "
0 0 20 3 6 #"values"
0 0 20 3 2 #"  "
0 0 20 3 5 #"types"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 5 #"which"
0 0 20 3 1 #" "
0 0 20 3 4 #"they"
0 0 20 3 1 #" "
0 0 20 3 6 #"belong"
0 0 20 3 1 #" "
0 0 20 3 2 #"in"
0 0 20 3 1 #" "
0 0 20 3 17 #"principle, but it"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 6 #"cannot"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 1 #" "
0 0 20 3 9 #"exploited"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 6 #"assign"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 5 #"value"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 8 #"variable"
0 0 20 3 1 #" "
0 0 20 3 4 #"with"
0 0 20 3 1 #" "
0 0 20 3 21 #"an incompatible type."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 8 #"Finally,"
0 0 20 3 1 #" "
0 0 20 3 4 #"when"
0 0 20 3 1 #" "
0 0 20 3 4 #"some"
0 0 20 3 1 #" "
0 0 20 3 5 #"types"
0 0 20 3 1 #" "
0 0 20 3 3 #"are"
0 0 20 3 1 #" "
0 0 20 3 11 #"intersected"
0 0 20 3 1 #" "
0 0 20 3 4 #"with"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 26 #"polymorphic type variable,"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 12 #"intersection"
0 0 20 3 1 #" "
0 0 20 3 6 #"cannot"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 1 #" "
0 0 20 3 8 #"computed"
0 0 20 3 1 #" "
0 0 20 3 5 #"until"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 19 #"polymorphic type is"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 13 #"instantiated."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 5 #"When "
0 0 24 3 2 #"@|"
0 0 14 3 11 #"typedracket"
0 0 24 3 1 #"|"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 4 #"able"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 7 #"perform"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 30 #"simplification, occurrences of"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"Nothing"
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 1 #"("
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 6 #"bottom"
0 0 20 3 1 #" "
0 0 20 3 4 #"type"
0 0 20 3 2 #") "
0 0 20 3 9 #"propagate"
0 0 20 3 1 #" "
0 0 20 3 8 #"outwards"
0 0 20 3 1 #" "
0 0 20 3 2 #"in"
0 0 20 3 1 #" "
0 0 20 3 4 #"some"
0 0 20 3 1 #" "
0 0 20 3 16 #"cases, pairs and"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 29 3 6 #"struct"
0 0 20 3 1 #" "
0 0 20 3 5 #"types"
0 0 20 3 15 #" which contain "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"Nothing"
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 2 #"as"
0 0 20 3 1 #" "
0 0 20 3 3 #"one"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 20 #"their elements being"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 13 #"collapsed to "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"Nothing"
0 0 24 3 1 #"]"
0 0 20 3 1 #"."
0 0 20 3 1 #" "
0 0 20 3 4 #"This"
0 0 20 3 16 #" propagation of "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"Nothing"
0 0 24 3 1 #"]"
0 0 20 3 7 #" starts"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 4 #"from"
0 0 20 3 16 #" occurrences of "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"Nothing"
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 2 #"in"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 5 #"parts"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 20 #"resulting type which"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"are"
0 0 20 3 1 #" "
0 0 20 3 9 #"traversed"
0 0 20 3 1 #" "
0 0 20 3 2 #"by"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 12 #"intersection"
0 0 20 3 1 #" "
0 0 20 3 9 #"operator."
0 0 20 3 1 #" "
0 0 20 3 2 #"It"
0 0 20 3 1 #" "
0 0 20 3 9 #"collapses"
0 0 20 3 1 #" "
0 0 20 3 20 #"the containing pairs"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 4 #"and "
0 0 29 3 6 #"struct"
0 0 20 3 10 #" types to "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"Nothing"
0 0 24 3 1 #"]"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 6 #"moving"
0 0 20 3 1 #" "
0 0 20 3 8 #"outwards"
0 0 20 3 11 #" until the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 3 #"\342\210\251"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 8 #"operator"
0 0 20 3 1 #" "
0 0 20 3 6 #"itself"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 8 #"reached."
0 0 20 3 1 #" "
0 0 20 3 2 #"In"
0 0 20 3 1 #" "
0 0 20 3 10 #"principle,"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 11 #"propagation"
0 0 20 3 1 #" "
0 0 20 3 5 #"could"
0 0 20 3 1 #" "
0 0 20 3 10 #"go on past"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 4 #"that"
0 0 20 3 1 #" "
0 0 20 3 6 #"point,"
0 0 20 3 1 #" "
0 0 20 3 3 #"but"
0 0 20 3 1 #" "
0 0 20 3 4 #"this"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 3 #"not"
0 0 20 3 1 #" "
0 0 20 3 11 #"implemented"
0 0 20 3 8 #" yet in "
0 0 24 3 2 #"@|"
0 0 14 3 11 #"typedracket"
0 0 24 3 2 #"|@"
0 0 14 3 4 #"note"
0 0 24 3 1 #"{"
0 0 20 3 3 #"See"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   @"
0 0 14 3 9 #"hyperlink"
0 0 24 3 1 #"["
0 0 19 3 50 #"\"https://github.com/racket/typed-racket/issues/552"
0 0 19 3 1 #"\""
0 0 24 3 2 #"]{"
0 0 20 3 10 #"Issue #552"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 3 #"on "
0 0 24 3 2 #"@|"
0 0 14 3 11 #"typedracket"
0 0 24 3 1 #"|"
0 0 20 3 54 #"'s GitHub repository for more details on what prevents"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 46 #"implementing a more aggressive propagation of "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"Nothing"
0 0 24 3 1 #"]"
0 0 20 3 1 #"."
0 0 24 3 1 #"}"
0 0 20 3 1 #"."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 9 #"The type "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 3 #"\342\210\251"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 2 #")]"
0 0 20 3 1 #" "
0 0 20 3 9 #"therefore"
0 0 20 3 1 #" "
0 0 20 3 4 #"gets"
0 0 20 3 1 #" "
0 0 20 3 14 #"simplified to "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"Nothing"
0 0 24 3 1 #"]"
0 0 20 3 1 #","
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 9 #"the type "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 3 #"\342\210\251"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 3 #"))]"
0 0 20 3 1 #" "
0 0 20 3 4 #"also"
0 0 20 3 14 #" simplifies to"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"Nothing"
0 0 24 3 1 #"]"
0 0 20 3 2 #" ("
0 0 24 3 2 #"@|"
0 0 14 3 11 #"typedracket"
0 0 24 3 1 #"|"
0 0 20 3 1 #" "
0 0 20 3 9 #"initially"
0 0 20 3 1 #" "
0 0 20 3 6 #"pushes"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 12 #"intersection"
0 0 20 3 9 #" down the"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 5 #"pairs"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 2 #"so"
0 0 20 3 1 #" "
0 0 20 3 4 #"that"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 4 #"type"
0 0 20 3 1 #" "
0 0 20 3 14 #"first becomes "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 6 #"Pairof"
0 0 24 3 2 #" ("
0 0 14 3 3 #"\342\210\251"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 3 #"\342\210\251"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 3 #"))]"
0 0 20 3 1 #","
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 5 #"which"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 14 #"simplified to "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Nothing"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 2 #")]"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 14 #" occurrence of"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"Nothing"
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 10 #"propagates"
0 0 20 3 1 #" "
0 0 20 3 8 #"outwards"
0 0 20 3 1 #")"
0 0 20 3 1 #"."
0 0 20 3 1 #" "
0 0 20 3 8 #"However,"
0 0 20 3 1 #" "
0 0 20 3 2 #"if"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 4 #"user"
0 0 20 3 19 #" directly specifies"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 9 #"the type "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 6 #"Pairof"
0 0 24 3 2 #" ("
0 0 14 3 3 #"\342\210\251"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #")]"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 2 #"it"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 14 #" simplified to"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Nothing"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #")]"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 8 #"but the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"Nothing"
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 4 #"does"
0 0 20 3 14 #" not propagate"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 8 #"outwards"
0 0 20 3 1 #" "
0 0 20 3 6 #"beyond"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 7 #"initial"
0 0 20 3 1 #" "
0 0 20 3 7 #"use of "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 3 #"\342\210\251"
0 0 24 3 1 #"]"
0 0 20 3 1 #"."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 8 #"examples"
0 0 24 3 1 #"["
0 0 23 3 7 #"#:label"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:eval"
0 0 24 3 2 #" ("
0 0 14 3 7 #"tr-eval"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #":type"
0 0 24 3 2 #" ("
0 0 14 3 3 #"\342\210\251"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #":type"
0 0 24 3 2 #" ("
0 0 14 3 3 #"\342\210\251"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #":type"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Pairof"
0 0 24 3 2 #" ("
0 0 14 3 3 #"\342\210\251"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 14 3 7 #"Integer"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 2 #"A "
0 0 20 3 7 #"simple "
0 0 20 3 11 #"workaround "
0 0 20 3 8 #"exists: "
0 0 20 3 4 #"the "
0 0 20 3 6 #"outer "
0 0 20 3 6 #"type, "
0 0 20 3 27 #"which could be collapsed to"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"Nothing"
0 0 24 3 1 #"]"
0 0 20 3 9 #", can be "
0 0 20 3 12 #"intersected "
0 0 20 3 6 #"again "
0 0 20 3 7 #"with a "
0 0 20 3 8 #"type of "
0 0 20 3 4 #"the "
0 0 20 3 15 #"same shape. The"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 6 #"outer "
0 0 20 3 13 #"intersection "
0 0 20 3 5 #"will "
0 0 20 3 9 #"traverse "
0 0 20 3 5 #"both "
0 0 20 3 30 #"types (the desired one and the"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 16 #"``shape''), and "
0 0 20 3 23 #"propagate the leftover "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"Nothing"
0 0 24 3 1 #"]"
0 0 20 3 13 #" further out."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 8 #"examples"
0 0 24 3 1 #"["
0 0 23 3 7 #"#:label"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:eval"
0 0 24 3 2 #" ("
0 0 14 3 7 #"tr-eval"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #":type"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Pairof"
0 0 24 3 2 #" ("
0 0 14 3 3 #"\342\210\251"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #":type"
0 0 24 3 2 #" ("
0 0 14 3 3 #"\342\210\251"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Pairof"
0 0 24 3 2 #" ("
0 0 14 3 3 #"\342\210\251"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 6 #"These "
0 0 20 3 14 #"intersections "
0 0 20 3 8 #"are not "
0 0 20 3 5 #"very "
0 0 20 3 42 #"interesting on their own, as in most cases"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 2 #"it"
0 0 20 3 4 #" is "
0 0 20 3 12 #"possible to "
0 0 20 3 12 #"express the "
0 0 20 3 10 #"resulting "
0 0 20 3 11 #"simplified "
0 0 20 3 5 #"type "
0 0 20 3 17 #"without using the"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 13 #"intersection "
0 0 20 3 15 #"operator. They "
0 0 20 3 7 #"become "
0 0 20 3 5 #"more "
0 0 20 3 7 #"useful "
0 0 20 3 5 #"when "
0 0 20 3 22 #"mixed with polymorphic"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 7 #"types: "
0 0 20 3 15 #"intersecting a "
0 0 20 3 12 #"polymorphic "
0 0 20 3 5 #"type "
0 0 20 3 9 #"variable "
0 0 20 3 29 #"with another type can be used"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"to "
0 0 20 3 9 #"restrict "
0 0 20 3 4 #"the "
0 0 20 3 7 #"actual "
0 0 20 3 34 #"values that may be used. The type "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 3 #"\342\210\251"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"T"
0 0 24 3 2 #")]"
0 0 20 3 1 #","
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 6 #"where "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 1 #"A"
0 0 24 3 1 #"]"
0 0 20 3 6 #" is a "
0 0 20 3 30 #"polymorphic type variable and "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 1 #"T"
0 0 24 3 1 #"]"
0 0 20 3 10 #" is a type"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 8 #"defined "
0 0 20 3 14 #"elsewhere, is "
0 0 20 3 14 #"equivalent to "
0 0 20 3 11 #"the use of "
0 0 20 3 26 #"bounded type parameters in"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  @|"
0 0 14 3 4 #"java"
0 0 24 3 1 #"|"
0 0 20 3 4 #" or "
0 0 24 3 2 #"@|"
0 0 14 3 6 #"csharp"
0 0 24 3 1 #"|"
0 0 20 3 5 #". In "
0 0 24 3 2 #"@|"
0 0 14 3 6 #"csharp"
0 0 24 3 1 #"|"
0 0 20 3 2 #", "
0 0 20 3 3 #"for"
0 0 20 3 1 #" "
0 0 20 3 7 #"example"
0 0 20 3 11 #", the type "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 3 #"\342\210\251"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"T"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 9 #"would be "
0 0 20 3 17 #"written using an "
0 0 24 3 1 #"@"
0 0 14 3 2 #"tt"
0 0 24 3 1 #"["
0 0 19 3 1 #"\""
0 0 19 3 5 #"where"
0 0 19 3 1 #" "
0 0 19 3 1 #"A"
0 0 19 3 1 #" "
0 0 19 3 1 #":"
0 0 19 3 2 #" T"
0 0 19 3 1 #"\""
0 0 24 3 1 #"]"
0 0 20 3 8 #" clause."
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 8 #"asection"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"atitle"
0 0 24 3 1 #"["
0 0 23 3 5 #"#:tag"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"tr-presentation-structs"
0 0 19 3 1 #"\""
0 0 24 3 2 #"]{"
0 0 29 3 7 #"Structs"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 21 #"Racket also supports "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 15 3 6 #"struct"
0 0 24 3 1 #"]"
0 0 20 3 36 #"s, which are mappings from fields to"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 10 #"values. A "
0 0 29 3 6 #"struct"
0 0 20 3 33 #" is further distinguished by its "
0 0 29 3 6 #"struct"
0 0 20 3 23 #" type: instances of two"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 29 3 6 #"struct"
0 0 20 3 72
(
 #" types with the same name and fields, declared in separate files, ca"
 #"n be"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 58
#"differentiated using the predicates associated with these "
0 0 29 3 7 #"structs"
0 0 20 3 2 #". "
0 0 29 3 7 #"Structs"
0 0 20 3 3 #" in"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 26 #"Racket can be seen as the "
0 0 29 3 6 #"analog"
0 0 20 3 42 #" of classes containing only fields (but no"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 12 #"methods) in "
0 0 24 3 1 #"@"
0 0 14 3 6 #"csharp"
0 0 20 3 4 #" or "
0 0 24 3 2 #"@|"
0 0 14 3 4 #"java"
0 0 24 3 1 #"|"
0 0 20 3 47 #". Such classes are sometimes called ``Plain Old"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 22 #"Data (POD) Objects''. "
0 0 29 3 7 #"Structs"
0 0 20 3 42 #" belong to a single-inheritance hierarchy:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 17 #"instances of the "
0 0 29 3 11 #"descendents"
0 0 20 3 6 #" of a "
0 0 29 3 6 #"struct"
0 0 20 3 29 #" type are recognised by their"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 29 #"ancestor's predicate. When a "
0 0 29 3 6 #"struct"
0 0 20 3 39 #" inherits from another, it includes its"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 53 #"parent's fields, and can add extra fields of its own."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 5 #"Each "
0 0 29 3 6 #"struct"
0 0 20 3 22 #" declaration within a "
0 0 24 3 2 #"@|"
0 0 14 3 11 #"typedracket"
0 0 24 3 1 #"|"
0 0 20 3 30 #" program additionally declares"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 19 #"corresponding type."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 8 #"examples"
0 0 24 3 1 #"["
0 0 23 3 7 #"#:label"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:eval"
0 0 24 3 2 #" ("
0 0 14 3 7 #"tr-eval"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 6 #"parent"
0 0 24 3 3 #" (["
0 0 14 3 8 #"field\342\202\201"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"parent"
0 0 24 3 3 #" (["
0 0 14 3 8 #"field\342\202\202"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ["
0 0 14 3 8 #"field\342\202\203"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"x"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 21 3 3 #"123"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"z"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"In "
0 0 24 3 2 #"@|"
0 0 14 3 11 #"typedracket"
0 0 24 3 1 #"|"
0 0 20 3 2 #", "
0 0 29 3 7 #"structs"
0 0 20 3 1 #" "
0 0 20 3 3 #"can"
0 0 20 3 1 #" "
0 0 20 3 4 #"have"
0 0 20 3 1 #" "
0 0 20 3 11 #"polymorphic"
0 0 20 3 1 #" "
0 0 20 3 4 #"type"
0 0 20 3 1 #" "
0 0 20 3 9 #"arguments"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 5 #"which"
0 0 20 3 7 #" can be"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 4 #"used"
0 0 20 3 1 #" "
0 0 20 3 6 #"inside"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 5 #"types"
0 0 20 3 1 #" "
0 0 20 3 7 #"of the "
0 0 29 3 8 #"struct's"
0 0 20 3 8 #" fields."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 8 #"examples"
0 0 24 3 1 #"["
0 0 23 3 7 #"#:label"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:eval"
0 0 24 3 2 #" ("
0 0 14 3 7 #"tr-eval"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"struct"
0 0 24 3 2 #" ("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #") "
0 0 14 3 6 #"poly-s"
0 0 24 3 3 #" (["
0 0 14 3 8 #"field\342\202\201"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ["
0 0 14 3 8 #"field\342\202\202"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ["
0 0 14 3 8 #"field\342\202\203"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"poly-s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"x"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 21 3 3 #"123"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"z"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 6 #"Racket"
0 0 20 3 17 #" further supports"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 4 #"tech"
0 0 24 3 1 #"["
0 0 23 3 5 #"#:doc"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"lib"
0 0 24 3 1 #" "
0 0 19 3 38 #"\"scribblings/reference/reference.scrbl"
0 0 19 3 1 #"\""
0 0 24 3 3 #")]{"
0 0 29 3 6 #"struct"
0 0 20 3 5 #" type"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 10 #"properties"
0 0 24 3 1 #"}"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 5 #"which"
0 0 20 3 1 #" "
0 0 20 3 3 #"can"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 1 #" "
0 0 20 3 4 #"seen"
0 0 20 3 1 #" "
0 0 20 3 2 #"as"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 7 #"limited"
0 0 20 3 1 #" "
0 0 20 3 4 #"form"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 6 #"method"
0 0 20 3 1 #" "
0 0 20 3 11 #"definitions"
0 0 20 3 6 #" for a"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 29 3 6 #"struct"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 7 #"thereby"
0 0 20 3 1 #" "
0 0 20 3 6 #"making"
0 0 20 3 1 #" "
0 0 20 3 4 #"them"
0 0 20 3 1 #" "
0 0 20 3 6 #"closer"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 4 #"real"
0 0 20 3 1 #" "
0 0 20 3 8 #"objects."
0 0 20 3 1 #" "
0 0 20 3 9 #"The same "
0 0 29 3 6 #"struct"
0 0 20 3 5 #" type"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 8 #"property"
0 0 20 3 1 #" "
0 0 20 3 3 #"can"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 1 #" "
0 0 20 3 11 #"implemented"
0 0 20 3 1 #" "
0 0 20 3 8 #"by many "
0 0 29 3 7 #"structs"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 11 #"declaration"
0 0 20 3 1 #" "
0 0 20 3 5 #"of a "
0 0 29 3 6 #"struct"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 4 #"type"
0 0 20 3 1 #" "
0 0 20 3 8 #"property"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 9 #"therefore"
0 0 20 3 1 #" "
0 0 20 3 7 #"roughly"
0 0 20 3 1 #" "
0 0 20 3 10 #"equivalent"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 11 #"declaration"
0 0 20 3 6 #" of an"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 9 #"interface"
0 0 20 3 1 #" "
0 0 20 3 4 #"with"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 15 #" single method."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 29 3 6 #"Struct"
0 0 20 3 1 #" "
0 0 20 3 4 #"type"
0 0 20 3 1 #" "
0 0 20 3 10 #"properties"
0 0 20 3 1 #" "
0 0 20 3 3 #"are"
0 0 20 3 1 #" "
0 0 20 3 5 #"often"
0 0 20 3 1 #" "
0 0 20 3 10 #"considered"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 9 #"low-level"
0 0 20 3 1 #" "
0 0 20 3 9 #"mechanism"
0 0 20 3 11 #" in Racket."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 5 #"Among"
0 0 20 3 1 #" "
0 0 20 3 5 #"other"
0 0 20 3 1 #" "
0 0 20 3 6 #"things"
0 0 20 3 4 #", a "
0 0 29 3 6 #"struct"
0 0 20 3 1 #" "
0 0 20 3 4 #"type"
0 0 20 3 1 #" "
0 0 20 3 8 #"property"
0 0 20 3 1 #" "
0 0 20 3 3 #"can"
0 0 20 3 1 #" "
0 0 20 3 4 #"only"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 1 #" "
0 0 20 3 4 #"used"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 6 #"define"
0 0 20 3 9 #" a single"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 8 #"property"
0 0 20 3 1 #" "
0 0 20 3 2 #"at"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 5 #"time."
0 0 20 3 1 #" "
0 0 20 3 4 #"When"
0 0 20 3 1 #" "
0 0 20 3 8 #"multiple"
0 0 20 3 1 #" "
0 0 20 3 2 #"``"
0 0 20 3 7 #"methods"
0 0 20 3 2 #"''"
0 0 20 3 1 #" "
0 0 20 3 4 #"have"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 1 #" "
0 0 20 3 7 #"defined"
0 0 20 3 1 #" "
0 0 20 3 2 #"at"
0 0 20 3 10 #" once (for"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 7 #"example"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 4 #"when"
0 0 20 3 1 #" "
0 0 20 3 13 #"defining the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 15 #"prop:equal+hash"
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 8 #"property"
0 0 20 3 1 #","
0 0 20 3 15 #" which requires"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 10 #"definition"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 2 #"an"
0 0 20 3 1 #" "
0 0 20 3 8 #"equality"
0 0 20 3 1 #" "
0 0 20 3 10 #"comparison"
0 0 20 3 1 #" "
0 0 20 3 8 #"function"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 3 #"two"
0 0 20 3 1 #" "
0 0 20 3 7 #"hashing"
0 0 20 3 12 #" functions),"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 5 #"these"
0 0 20 3 1 #" "
0 0 20 3 3 #"can"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 1 #" "
0 0 20 3 7 #"grouped"
0 0 20 3 1 #" "
0 0 20 3 8 #"together"
0 0 20 3 1 #" "
0 0 20 3 2 #"in"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 4 #"list"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 9 #"functions"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 5 #"which"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 4 #"then"
0 0 20 3 8 #" used as"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 8 #"property"
0 0 20 3 9 #"'s value."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 2 #"``"
0 0 24 3 1 #"@"
0 0 14 3 7 #"seclink"
0 0 24 3 1 #"["
0 0 19 3 16 #"\"struct-generics"
0 0 19 3 1 #"\""
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 23 3 5 #"#:doc"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"lib"
0 0 24 3 1 #" "
0 0 19 3 38 #"\"scribblings/reference/reference.scrbl"
0 0 19 3 1 #"\""
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 18 #"Generic interfaces"
0 0 24 3 1 #"}"
0 0 20 3 2 #"''"
0 0 20 3 1 #" "
0 0 20 3 3 #"are"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 12 #"higher-level"
0 0 20 3 1 #" "
0 0 20 3 7 #"feature"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 5 #"which"
0 0 20 3 1 #" "
0 0 20 3 5 #"among"
0 0 20 3 13 #" other things"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 5 #"allow"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 10 #"definition"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 8 #"multiple"
0 0 20 3 1 #" "
0 0 20 3 2 #"``"
0 0 20 3 7 #"methods"
0 0 20 3 2 #"''"
0 0 20 3 1 #" "
0 0 20 3 2 #"as"
0 0 20 3 1 #" "
0 0 20 3 4 #"part"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 15 #" single generic"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 9 #"interface"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 6 #"offers"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 10 #"friendlier"
0 0 20 3 1 #" "
0 0 20 3 3 #"API"
0 0 20 3 1 #" "
0 0 20 3 3 #"for"
0 0 20 3 1 #" "
0 0 20 3 10 #"specifying"
0 0 20 3 1 #" "
0 0 20 3 13 #"the ``generic"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 9 #"interface"
0 0 20 3 2 #"''"
0 0 20 3 1 #" "
0 0 20 3 6 #"itself"
0 0 20 3 2 #" ("
0 0 20 3 4 #"i.e."
0 0 20 3 1 #" "
0 0 20 3 4 #"what"
0 0 20 3 1 #" "
0 0 20 3 6 #"Object"
0 0 20 3 1 #" "
0 0 20 3 8 #"Oriented"
0 0 20 3 1 #" "
0 0 20 3 9 #"languages"
0 0 20 3 1 #" "
0 0 20 3 8 #"call an "
0 0 29 3 9 #"interfece"
0 0 20 3 5 #"), as"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 3 #"for"
0 0 20 3 1 #" "
0 0 20 3 10 #"specifying"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 14 #"implementation"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 16 #" said interface."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  @|"
0 0 14 3 11 #"Typedracket"
0 0 24 3 1 #"|"
0 0 20 3 1 #" "
0 0 20 3 13 #"unfortunately"
0 0 20 3 1 #" "
0 0 20 3 6 #"offers"
0 0 20 3 1 #" "
0 0 20 3 2 #"no"
0 0 20 3 1 #" "
0 0 20 3 12 #"support for "
0 0 29 3 6 #"struct"
0 0 20 3 1 #" "
0 0 20 3 4 #"type"
0 0 20 3 15 #" properties and"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 7 #"generic"
0 0 20 3 1 #" "
0 0 20 3 10 #"interfaces"
0 0 20 3 1 #" "
0 0 20 3 3 #"for"
0 0 20 3 1 #" "
0 0 20 3 4 #"now."
0 0 20 3 1 #" "
0 0 20 3 2 #"It"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 10 #"impossible"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 6 #"assert"
0 0 20 3 1 #" "
0 0 20 3 7 #"that a "
0 0 29 3 6 #"struct"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 10 #"implements"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 5 #"given"
0 0 20 3 1 #" "
0 0 20 3 8 #"property"
0 0 20 3 1 #" "
0 0 20 3 2 #"at"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 4 #"type"
0 0 20 3 1 #" "
0 0 20 3 5 #"level"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 2 #"it"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 4 #"also"
0 0 20 3 1 #" "
0 0 20 3 3 #"for"
0 0 20 3 12 #" example not"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 8 #"possible"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 8 #"describe"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 4 #"type"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 8 #"function"
0 0 20 3 1 #" "
0 0 20 3 14 #"accepting any "
0 0 29 3 6 #"struct"
0 0 20 3 13 #" implementing"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 5 #"given"
0 0 20 3 1 #" "
0 0 20 3 8 #"property"
0 0 20 3 1 #" "
0 0 20 3 2 #"or"
0 0 20 3 1 #" "
0 0 20 3 7 #"generic"
0 0 20 3 1 #" "
0 0 20 3 10 #"interface."
0 0 20 3 1 #" "
0 0 20 3 7 #"Finally"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 2 #"no"
0 0 20 3 1 #" "
0 0 20 3 4 #"type"
0 0 20 3 1 #" "
0 0 20 3 6 #"checks"
0 0 20 3 14 #" are performed"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 2 #"on"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 4 #"body"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 9 #"functions"
0 0 20 3 1 #" "
0 0 20 3 5 #"bound"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 4 #"such"
0 0 20 3 1 #" "
0 0 20 3 10 #"properties"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 5 #"check"
0 0 20 3 14 #" verifies that"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 8 #"function"
0 0 20 3 1 #" "
0 0 20 3 14 #"implementation"
0 0 20 3 1 #" "
0 0 20 3 4 #"with"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 5 #"right"
0 0 20 3 1 #" "
0 0 20 3 9 #"signature"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 8 #"supplied"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 8 #" a given"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 16 #"property. Since "
0 0 29 3 6 #"struct"
0 0 20 3 1 #" "
0 0 20 3 4 #"type"
0 0 20 3 1 #" "
0 0 20 3 10 #"properties"
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 8 #"generics"
0 0 20 3 1 #" "
0 0 20 3 6 #"cannot"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 1 #" "
0 0 20 3 4 #"used"
0 0 20 3 5 #" in a"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 9 #"type-safe"
0 0 20 3 1 #" "
0 0 20 3 3 #"way"
0 0 20 3 1 #" "
0 0 20 3 3 #"for"
0 0 20 3 1 #" "
0 0 20 3 3 #"now"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 2 #"we"
0 0 20 3 1 #" "
0 0 20 3 7 #"refrain"
0 0 20 3 1 #" "
0 0 20 3 4 #"from"
0 0 20 3 1 #" "
0 0 20 3 5 #"using"
0 0 20 3 1 #" "
0 0 20 3 5 #"these"
0 0 20 3 1 #" "
0 0 20 3 8 #"features"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 4 #"only"
0 0 20 3 9 #" use them"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 9 #"implement"
0 0 20 3 1 #" "
0 0 20 3 4 #"some"
0 0 20 3 1 #" "
0 0 20 3 4 #"very"
0 0 20 3 18 #" common properties"
0 0 24 3 1 #"@"
0 0 14 3 4 #"note"
0 0 24 3 1 #"{"
0 0 20 3 2 #"We"
0 0 20 3 1 #" "
0 0 20 3 5 #"built"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 4 #"thin"
0 0 20 3 14 #" macro wrapper"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 13 #"which allows "
0 0 29 3 12 #"typechecking"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 14 #"implementation"
0 0 20 3 1 #" "
0 0 20 3 3 #"and"
0 0 20 3 1 #" "
0 0 20 3 9 #"signature"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 14 #" the functions"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 5 #"bound"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 5 #"these"
0 0 20 3 16 #" two properties."
0 0 24 3 1 #"}"
0 0 20 3 2 #": "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 17 #"prop:custom-write"
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 5 #"which"
0 0 20 3 7 #" is the"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 14 #"equivalent of "
0 0 24 3 2 #"@|"
0 0 14 3 4 #"java"
0 0 24 3 1 #"|"
0 0 20 3 3 #"'s "
0 0 24 3 1 #"@"
0 0 14 3 2 #"tt"
0 0 24 3 1 #"["
0 0 19 3 1 #"\""
0 0 19 3 4 #"void"
0 0 19 3 1 #" "
0 0 19 3 10 #"toString()"
0 0 19 3 1 #"\""
0 0 24 3 1 #"]"
0 0 20 3 6 #", and "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 15 #"prop:equal+hash"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 5 #"which"
0 0 20 3 1 #" "
0 0 20 3 2 #"is"
0 0 20 3 1 #" "
0 0 20 3 14 #"equivalent to "
0 0 24 3 2 #"@|"
0 0 14 3 4 #"java"
0 0 24 3 1 #"|"
0 0 20 3 3 #"'s "
0 0 24 3 1 #"@"
0 0 14 3 2 #"tt"
0 0 24 3 1 #"["
0 0 19 3 1 #"\""
0 0 19 3 7 #"boolean"
0 0 19 3 1 #" "
0 0 19 3 6 #"equals"
0 0 19 3 1 #"("
0 0 19 3 6 #"Object"
0 0 19 3 1 #" "
0 0 19 3 2 #"o)"
0 0 19 3 1 #"\""
0 0 24 3 1 #"]"
0 0 20 3 4 #" and"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 2 #"tt"
0 0 24 3 1 #"["
0 0 19 3 1 #"\""
0 0 19 3 3 #"int"
0 0 19 3 1 #" "
0 0 19 3 10 #"hashCode()"
0 0 19 3 1 #"\""
0 0 24 3 1 #"]"
0 0 20 3 1 #"."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" }"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 8 #"asection"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"atitle"
0 0 24 3 1 #"["
0 0 23 3 5 #"#:tag"
0 0 24 3 1 #" "
0 0 19 3 26 #"\"tr-presentation-functions"
0 0 19 3 1 #"\""
0 0 24 3 2 #"]{"
0 0 20 3 9 #"Functions"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  @|"
0 0 14 3 11 #"Typedracket"
0 0 24 3 1 #"|"
0 0 20 3 1 #" "
0 0 20 3 9 #"supports "
0 0 20 3 5 #"rich "
0 0 20 3 9 #"function "
0 0 20 3 10 #"types, to "
0 0 20 3 28 #"support some of the flexible"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 4 #"use "
0 0 20 3 27 #"patterns allowed by Racket."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 4 #"The "
0 0 20 3 7 #"simple "
0 0 20 3 9 #"function "
0 0 20 3 11 #"type below "
0 0 20 3 10 #"indicates "
0 0 20 3 5 #"that "
0 0 20 3 24 #"the function expects two"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 14 #"arguments (an "
0 0 20 3 45 #"integer and a string), and returns a boolean:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 11 #"racketblock"
0 0 24 3 2 #"[("
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 20 #"We note that unlike "
0 0 24 3 2 #"@|"
0 0 14 3 7 #"haskell"
0 0 24 3 1 #"|"
0 0 20 3 5 #" and "
0 0 24 3 2 #"@|"
0 0 14 3 4 #"CAML"
0 0 24 3 1 #"|"
0 0 20 3 12 #" functions, "
0 0 20 3 20 #"Racket functions are"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 4 #"not "
0 0 20 3 11 #"implicitly "
0 0 20 3 12 #"curried. To "
0 0 20 3 8 #"express "
0 0 20 3 4 #"the "
0 0 20 3 14 #"corresponding "
0 0 20 3 22 #"curried function type,"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 16 #"one would write:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 11 #"racketblock"
0 0 24 3 2 #"[("
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #" ("
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 2 #"A "
0 0 20 3 13 #"function may "
0 0 20 3 13 #"additionally "
0 0 20 3 7 #"accept "
0 0 20 3 9 #"optional "
0 0 20 3 33 #"positional arguments, and keyword"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 6 #"(i.e. "
0 0 20 3 7 #"named) "
0 0 20 3 11 #"arguments, "
0 0 20 3 28 #"both mandatory and optional:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 12 #"code:comment"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 9 #"Mandatory"
0 0 19 3 1 #" "
0 0 19 3 6 #"string"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 8 #"optional"
0 0 19 3 1 #" "
0 0 19 3 7 #"integer"
0 0 19 3 1 #" "
0 0 19 3 3 #"and"
0 0 19 3 1 #" "
0 0 19 3 7 #"boolean"
0 0 19 3 11 #" arguments:"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 3 #"->*"
0 0 24 3 2 #" ("
0 0 14 3 6 #"String"
0 0 24 3 3 #") ("
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 2 #") "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 12 #"code:comment"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 9 #"Mandatory"
0 0 19 3 1 #" "
0 0 19 3 7 #"keyword"
0 0 19 3 11 #" arguments:"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:size"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:str"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 12 #"code:comment"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 9 #"Mandatory"
0 0 19 3 1 #" "
0 0 19 3 5 #"#:str"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 8 #"optional"
0 0 19 3 1 #" "
0 0 19 3 6 #"#:size"
0 0 19 3 1 #" "
0 0 19 3 3 #"and"
0 0 19 3 7 #" #:opt:"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 3 #"->*"
0 0 24 3 2 #" ("
0 0 23 3 5 #"#:str"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 3 #") ("
0 0 23 3 6 #"#:size"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:opt"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 2 #") "
0 0 14 3 7 #"Boolean"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 13 #"Furthermore, "
0 0 20 3 1 #"f"
0 0 20 3 8 #"unctions"
0 0 20 3 1 #" "
0 0 20 3 2 #"in"
0 0 20 3 1 #" "
0 0 20 3 1 #"R"
0 0 20 3 5 #"acket"
0 0 20 3 1 #" "
0 0 20 3 6 #"accept"
0 0 20 3 37 #" a catch-all ``rest'' argument, which"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 7 #"allows "
0 0 20 3 22 #"for the definition of "
0 0 29 3 8 #"variadic"
0 0 20 3 12 #" functions. "
0 0 20 3 6 #"Typed "
0 0 20 3 18 #"racket also allows"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 11 #"expressing "
0 0 20 3 8 #"this at "
0 0 20 3 4 #"the "
0 0 20 3 5 #"type "
0 0 20 3 10 #"level, as "
0 0 20 3 8 #"long as "
0 0 20 3 28 #"the arguments covered by the"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 9 #"``rest'' "
0 0 20 3 11 #"clause all "
0 0 20 3 5 #"have "
0 0 20 3 14 #"the same type:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 12 #"code:comment"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"The"
0 0 19 3 1 #" "
0 0 19 3 8 #"function"
0 0 19 3 1 #" "
0 0 19 3 7 #"accepts"
0 0 19 3 1 #" "
0 0 19 3 3 #"one"
0 0 19 3 1 #" "
0 0 19 3 7 #"integer"
0 0 19 3 1 #" "
0 0 19 3 3 #"and"
0 0 19 3 1 #" "
0 0 19 3 3 #"any"
0 0 19 3 1 #" "
0 0 19 3 6 #"number"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 9 #" strings:"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 12 #"code:comment"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"Same"
0 0 19 3 1 #" "
0 0 19 3 5 #"thing"
0 0 19 3 1 #" "
0 0 19 3 4 #"with"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 8 #"optional"
0 0 19 3 1 #" "
0 0 19 3 6 #"symbol"
0 0 19 3 1 #" "
0 0 19 3 11 #"inbetween: "
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 3 #"->*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Integer"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Symbol"
0 0 24 3 2 #") "
0 0 23 3 6 #"#:rest"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 7 #"One of "
0 0 24 3 2 #"@|"
0 0 14 3 11 #"typedracket"
0 0 24 3 1 #"|"
0 0 20 3 31 #"'s main goals is to be able to "
0 0 29 3 9 #"typecheck"
0 0 20 3 10 #" idiomatic"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 7 #"Racket "
0 0 20 3 10 #"programs. "
0 0 20 3 5 #"Such "
0 0 20 3 13 #"programs may "
0 0 20 3 8 #"include "
0 0 20 3 10 #"functions "
0 0 20 3 6 #"whose "
0 0 20 3 19 #"return type depends"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"on "
0 0 20 3 4 #"the "
0 0 20 3 10 #"values of "
0 0 20 3 32 #"the input arguments. Similarly, "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 15 3 11 #"case-lambda"
0 0 24 3 1 #"]"
0 0 20 3 7 #" can be"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 32 #"used to create lambda functions "
0 0 20 3 6 #"which "
0 0 20 3 12 #"dispatch to "
0 0 20 3 28 #"multiple behaviours based on"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 14 #"the number of "
0 0 20 3 33 #"arguments passed to the function."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  @|"
0 0 14 3 11 #"Typedracket"
0 0 24 3 1 #"|"
0 0 20 3 14 #" provides the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"case\342\206\222"
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 35 #"type operator, which can be used to"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 9 #"describe "
0 0 20 3 4 #"the "
0 0 20 3 24 #"type of these functions:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 12 #"code:comment"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Allows"
0 0 19 3 1 #" "
0 0 19 3 1 #"1"
0 0 19 3 1 #" "
0 0 19 3 2 #"or"
0 0 19 3 1 #" "
0 0 19 3 1 #"3"
0 0 19 3 1 #" "
0 0 19 3 9 #"arguments"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 4 #"with"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 4 #"same"
0 0 19 3 1 #" "
0 0 19 3 6 #"return"
0 0 19 3 6 #" type."
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"case\342\206\222"
0 0 24 3 2 #" ("
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 12 #"code:comment"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"A"
0 0 19 3 1 #" "
0 0 19 3 7 #"similar"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 5 #"based"
0 0 19 3 1 #" "
0 0 19 3 2 #"on"
0 0 19 3 1 #" "
0 0 19 3 8 #"optional"
0 0 19 3 1 #" "
0 0 19 3 9 #"arguments"
0 0 19 3 1 #" "
0 0 19 3 6 #"allows"
0 0 19 3 1 #" "
0 0 19 3 1 #"1"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 1 #"2"
0 0 19 3 1 #" "
0 0 19 3 2 #"or"
0 0 19 3 2 #" 3"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 12 #"code:comment"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 9 #"arguments"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 10 #" contrast:"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 3 #"->*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Integer"
0 0 24 3 3 #") ("
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 2 #") "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 12 #"code:comment"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"The"
0 0 19 3 1 #" "
0 0 19 3 6 #"output"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #" "
0 0 19 3 6 #"depend"
0 0 19 3 1 #" "
0 0 19 3 2 #"on"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 5 #"input"
0 0 19 3 6 #" type:"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"case\342\206\222"
0 0 24 3 2 #" ("
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 12 #"code:comment"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"Both"
0 0 19 3 1 #" "
0 0 19 3 8 #"features"
0 0 19 3 2 #" ("
0 0 19 3 5 #"arity"
0 0 19 3 1 #" "
0 0 19 3 3 #"and"
0 0 19 3 1 #" "
0 0 19 3 9 #"dependent"
0 0 19 3 1 #" "
0 0 19 3 6 #"output"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 2 #") "
0 0 19 3 3 #"can"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 6 #" mixed"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"case\342\206\222"
0 0 24 3 2 #" ("
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 8 #"Another "
0 0 20 3 19 #"important feature, "
0 0 20 3 13 #"which can be "
0 0 20 3 9 #"found in "
0 0 20 3 23 #"the type system of most"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 11 #"functional "
0 0 20 3 12 #"programming "
0 0 20 3 49 #"languages, and most object-oriented languages, is"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 25 #"parametric polymorphism. "
0 0 24 3 2 #"@|"
0 0 14 3 11 #"Typedracket"
0 0 24 3 1 #"|"
0 0 20 3 1 #" "
0 0 20 3 7 #"allows "
0 0 20 3 29 #"the definition of polymorphic"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 29 3 7 #"structs"
0 0 20 3 5 #", as "
0 0 20 3 19 #"detailed above, as "
0 0 20 3 8 #"well as "
0 0 20 3 12 #"polymorphic "
0 0 20 3 27 #"functions. For example, the"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 9 #"function "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 4 #"cons"
0 0 24 3 1 #"]"
0 0 20 3 35 #" can be considered as a polymorphic"
0 0 20 3 10 #" function "
0 0 20 3 4 #"with"
0 0 20 3 4 #" two"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 11 #"polymorphic"
0 0 20 3 1 #" "
0 0 20 3 15 #"type arguments "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 1 #"A"
0 0 24 3 1 #"]"
0 0 20 3 5 #" and "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 1 #"B"
0 0 24 3 1 #"]"
0 0 20 3 1 #","
0 0 20 3 24 #" which takes an argument"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 8 #"of type "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 1 #"A"
0 0 24 3 1 #"]"
0 0 20 3 22 #", an argument of type "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 1 #"B"
0 0 24 3 1 #"]"
0 0 20 3 23 #", and returns a pair of"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 1 #"A"
0 0 24 3 1 #"]"
0 0 20 3 5 #" and "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 1 #"B"
0 0 24 3 1 #"]"
0 0 20 3 1 #"."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 11 #"racketblock"
0 0 24 3 2 #"[("
0 0 14 3 3 #"\342\210\200"
0 0 24 3 2 #" ("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 3 #") ("
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 5 #"htodo"
0 0 24 3 1 #"{"
0 0 20 3 13 #"Something on "
0 0 20 3 54 #"which types can be inferred and which can't (for now)."
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 9 #"Finally, "
0 0 20 3 12 #"predicates ("
0 0 20 3 10 #"functions "
0 0 20 3 36 #"whose results can be interpreted as "
0 0 29 3 8 #"booleans"
0 0 20 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 15 #"can be used to "
0 0 20 3 5 #"gain "
0 0 20 3 12 #"information "
0 0 20 3 6 #"about "
0 0 20 3 4 #"the "
0 0 20 3 8 #"type of "
0 0 20 3 28 #"their argument, depending on"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 4 #"the "
0 0 20 3 12 #"result. The "
0 0 20 3 10 #"type of a "
0 0 20 3 52 #"predicate can include positive and negative filters,"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 15 #"indicated with "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 23 3 3 #"#:+"
0 0 24 3 1 #"]"
0 0 20 3 5 #" and "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 23 3 3 #"#:-"
0 0 24 3 1 #"]"
0 0 20 3 31 #", respectively. The type of the"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"string?"
0 0 24 3 1 #"]"
0 0 20 3 14 #" predicate is:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 11 #"racketblock"
0 0 24 3 2 #"[("
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 23 3 3 #"#:+"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 23 3 3 #"#:-"
0 0 24 3 2 #" ("
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"In "
0 0 20 3 5 #"this "
0 0 20 3 10 #"notation, "
0 0 20 3 20 #"the positive filter "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 23 3 3 #"#:+"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #"]"
0 0 20 3 20 #" indicates that when"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 22 #"the predicate returns "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 5 #"#true"
0 0 24 3 1 #"]"
0 0 20 3 2 #", "
0 0 20 3 29 #"the argument is known to be a"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 6 #"String"
0 0 24 3 1 #"]"
0 0 20 3 19 #". Conversely, when "
0 0 20 3 4 #"the "
0 0 20 3 21 #"predicate exits with "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 21 3 6 #"#false"
0 0 24 3 1 #"]"
0 0 20 3 1 #","
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 20 #"the negative filter "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 23 3 3 #"#:-"
0 0 24 3 2 #" ("
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 2 #")]"
0 0 20 3 11 #" indicates "
0 0 20 3 5 #"that "
0 0 20 3 19 #"the input could not"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 1 #"("
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 1 #"!"
0 0 24 3 1 #"]"
0 0 20 3 2 #") "
0 0 20 3 9 #"possibly "
0 0 20 3 12 #"have been a "
0 0 20 3 12 #"string. The "
0 0 20 3 12 #"information "
0 0 20 3 15 #"gained this way"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 7 #"allows "
0 0 20 3 20 #"regular conditionals"
0 0 20 3 1 #" "
0 0 20 3 9 #"based on "
0 0 20 3 33 #"arbitrary predicates to work like"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 17 #"pattern-matching:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 8 #"examples"
0 0 24 3 1 #"["
0 0 23 3 7 #"#:label"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:eval"
0 0 24 3 2 #" ("
0 0 14 3 7 #"tr-eval"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 2 #" ["
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 12 #"code:comment"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"x"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 5 #"known"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 6 #"String"
0 0 19 3 6 #" here:"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 3 #"ann"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 12 #"code:comment"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"x"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 5 #"known"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 6 #"Number"
0 0 19 3 1 #" "
0 0 19 3 2 #"or"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 6 #"Symbol"
0 0 19 3 6 #" here:"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 3 #"ann"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 4 #"The "
0 0 20 3 20 #"propositions do not "
0 0 20 3 12 #"necessarily "
0 0 20 3 8 #"need to "
0 0 20 3 9 #"refer to "
0 0 20 3 21 #"the value as a whole,"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 8 #"and can "
0 0 20 3 8 #"instead "
0 0 20 3 5 #"give "
0 0 20 3 12 #"information "
0 0 20 3 8 #"about a "
0 0 20 3 8 #"sub-part"
0 0 20 3 4 #" of "
0 0 20 3 25 #"the value. Right now, the"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 5 #"user "
0 0 20 3 14 #"interface for "
0 0 20 3 21 #"specifying paths can "
0 0 20 3 5 #"only "
0 0 20 3 7 #"target "
0 0 20 3 4 #"the "
0 0 20 3 22 #"left and right members"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"of "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 4 #"cons"
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 32 #"pairs, recursively. Internally, "
0 0 24 3 2 #"@|"
0 0 14 3 11 #"typedracket"
0 0 24 3 1 #"|"
0 0 20 3 9 #" supports"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 14 #"richer paths, "
0 0 20 3 4 #"and "
0 0 20 3 1 #"t"
0 0 20 3 3 #"he "
0 0 20 3 4 #"type"
0 0 20 3 15 #" inference can "
0 0 20 3 8 #"produce "
0 0 20 3 18 #"filters which give"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 11 #"information"
0 0 20 3 1 #" "
0 0 20 3 5 #"about"
0 0 20 3 1 #" "
0 0 20 3 10 #"individual"
0 0 20 3 22 #" structure fields, or "
0 0 20 3 6 #"about "
0 0 20 3 20 #"the result of forced"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 22 #"promises, for example."
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 8 #"asection"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"atitle"
0 0 24 3 1 #"["
0 0 23 3 5 #"#:tag"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 32 #"tr-presentation-recursive-types\""
0 0 24 3 2 #"]{"
0 0 20 3 15 #"Recursive types"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  @|"
0 0 14 3 11 #"Typedracket"
0 0 24 3 1 #"|"
0 0 20 3 8 #" allows "
0 0 20 3 10 #"recursive "
0 0 20 3 7 #"types, "
0 0 20 3 10 #"both via ("
0 0 20 3 8 #"possibly"
0 0 20 3 1 #" "
0 0 20 3 19 #"mutually-recursive)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 5 #"named"
0 0 20 3 27 #" declarations, and via the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 3 #"Rec"
0 0 24 3 1 #"]"
0 0 20 3 15 #" type operator."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"In "
0 0 20 3 14 #"the following "
0 0 20 3 20 #"examples, the types "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 3 #"Foo"
0 0 24 3 1 #"]"
0 0 20 3 5 #" and "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 3 #"Bar"
0 0 24 3 1 #"]"
0 0 20 3 4 #" are"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 29 #"mutually recursive. The type "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 3 #"Foo"
0 0 24 3 1 #"]"
0 0 20 3 9 #" matches "
0 0 20 3 6 #"lists "
0 0 20 3 22 #"with an even number of"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 12 #"alternating "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"Integer"
0 0 24 3 1 #"]"
0 0 20 3 5 #" and "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 6 #"String"
0 0 24 3 1 #"]"
0 0 20 3 27 #" elements, starting with an"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 7 #"Integer"
0 0 24 3 1 #"]"
0 0 20 3 1 #","
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"Foo"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 3 #"Bar"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"Bar"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 14 3 3 #"Foo"
0 0 24 3 1 #" "
0 0 14 3 4 #"Null"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 5 #"This "
0 0 20 3 5 #"same "
0 0 20 3 5 #"type "
0 0 20 3 6 #"could "
0 0 20 3 17 #"alternatively be "
0 0 20 3 18 #"defined using the "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 3 #"Rec"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 23 #"operator. The notation "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 2 #"[("
0 0 14 3 3 #"Rec"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 1 #" "
0 0 14 3 1 #"T"
0 0 24 3 2 #")]"
0 0 20 3 1 #" "
0 0 20 3 16 #"builds the type "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 1 #"T"
0 0 24 3 1 #"]"
0 0 20 3 7 #", where"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 15 #"occurrences of "
0 0 24 3 1 #"@"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 1 #"R"
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 4 #"are "
0 0 20 3 39 #"interpreted as recursive occurrences of"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"racket"
0 0 24 3 1 #"["
0 0 14 3 1 #"T"
0 0 24 3 1 #"]"
0 0 20 3 8 #" itself."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Rec"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 6 #"Pairof"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 1 #" "
0 0 14 3 4 #"Null"
0 0 24 3 6 #"))))]}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 8 #"asection"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"atitle"
0 0 24 3 1 #"{"
0 0 20 3 7 #"Classes"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"The"
0 0 20 3 1 #" "
0 0 24 3 1 #"@"
0 0 14 3 13 #"racketmodname"
0 0 24 3 1 #"["
0 0 14 3 12 #"racket/class"
0 0 24 3 1 #"]"
0 0 20 3 1 #" "
0 0 20 3 6 #"module"
0 0 20 3 1 #" "
0 0 20 3 8 #"provides"
0 0 20 3 30 #" an object-oriented system for"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 11 #"Racket. It "
0 0 20 3 9 #"supports "
0 0 20 3 4 #"the "
0 0 20 3 14 #"definition of "
0 0 20 3 8 #"classes "
0 0 20 3 5 #"with "
0 0 20 3 12 #"methods and "
0 0 20 3 7 #"fields."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 26 #"We will not describe this "
0 0 24 29 1 #"\n"
0 0 24 3 2 #" }"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 8 #"asection"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"atitle"
0 0 24 3 1 #"{"
0 0 20 3 17 #"Occurrence typing"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" }"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 8 #"asection"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 6 #"atitle"
0 0 24 3 1 #"{"
0 0 20 3 21 #"Global type inference"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" }"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0           0
